<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>endeavor [at] rainbowsandpwnies.com</title><link href="http://tfpwn.rainbowsandpwnies.com/" rel="alternate"></link><link href="http://tfpwn.rainbowsandpwnies.com/feeds/all-en.atom.xml" rel="self"></link><id>http://tfpwn.rainbowsandpwnies.com/</id><updated>2013-08-23T18:08:00-05:00</updated><entry><title>RE101</title><link href="http://tfpwn.rainbowsandpwnies.com/re101.html" rel="alternate"></link><updated>2013-08-23T18:08:00-05:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2013-08-23:re101.html</id><summary type="html">&lt;p&gt;This write-up is for the &amp;quot;re101&amp;quot; challenge in the 2013 Bits for Everyone CTF, the qualifier for cadets at the United States Military Academy to join their competitive hacking team, C3T. I wrote this challenge for the CTF. This write up explains how I put this challenge together. This challenge would fall under the category, &amp;quot;Reversing,&amp;quot; or, &amp;quot;Crackme.&amp;quot;&lt;/p&gt;
&lt;p&gt;This challenge is written in &lt;a class="reference external" href="http://github.com/endeav0r/hsvm/"&gt;hsvm&lt;/a&gt; assembly, and you will need hsvm to run this challenge. I actually had to write a new assembler for hsvm in python to put this challenge together. Complete source for this assembler is included at the end of this post.&lt;/p&gt;
&lt;p&gt;For reference purposes the binary is available &lt;a class="reference external" href="http://tfpwn.rainbowsandpwnies.com/files/re101.bin"&gt;here&lt;/a&gt;. You should be able to follow along without the binary as we'll be talking mostly about how I put the binary together.&lt;/p&gt;
&lt;p&gt;This challenge revolves around what I named the &lt;tt class="docutils literal"&gt;CheckerFunction&lt;/tt&gt;. There are actually 511 versions of &lt;tt class="docutils literal"&gt;CheckerFunction&lt;/tt&gt;, 511 &lt;tt class="docutils literal"&gt;CheckerFail&lt;/tt&gt; functions and 1 &lt;tt class="docutils literal"&gt;CheckerSuccess&lt;/tt&gt;. This is a total 2^10-1 functions, or two functions for each of 10 bytes of input except for the first byte for which there is only one &lt;tt class="docutils literal"&gt;CheckerFunction&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Each &lt;tt class="docutils literal"&gt;CheckerFunction&lt;/tt&gt; &amp;quot;points&amp;quot; to two other &lt;tt class="docutils literal"&gt;CheckerFunction&lt;/tt&gt;. Each &lt;tt class="docutils literal"&gt;CheckerFunction&lt;/tt&gt; will receive one byte of input, add it to a buffer, and then jump to the next &lt;tt class="docutils literal"&gt;CheckerFunction&lt;/tt&gt; based on the least-significant-bit of that one byte of input.&lt;/p&gt;
&lt;p&gt;To make things a little more interesting, every &lt;tt class="docutils literal"&gt;CheckerFunction&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;xor&lt;/tt&gt; encrypted, with a random byte, which is embedded at assemble-time in its parent &lt;tt class="docutils literal"&gt;CheckerFunction&lt;/tt&gt;, which is of course also &lt;tt class="docutils literal"&gt;xor&lt;/tt&gt; encrypted, all the way up to the &lt;tt class="docutils literal"&gt;entry&lt;/tt&gt; function.&lt;/p&gt;
&lt;p&gt;This means that for the 10 bytes of input exactly 10 of the 1023 &lt;tt class="docutils literal"&gt;CheckerFunction&lt;/tt&gt; will be decrypted and run. For 1023 of 1024 possible least significant bits, the program will appear to just read in bytes and print &amp;quot;NO&amp;quot; with all other functionality still encrypted. The reverser will most likely need to programmatically instrument the program to discovery all code paths.&lt;/p&gt;
&lt;p&gt;Let's start looking at some of the actual assembly with the entry block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;; we will store input bytes in a buffer at 0xffc0
mov r7, 0xffc0

mov r0, FirstCheckerFunctionAddress
mov r1, FirstCheckerFunctionSize
mov r2, FirstCheckerFunctionKey

jmp xor_jmp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We'll next introduce the xor_jmp function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;; &amp;quot;decrypts&amp;quot; xor encrypted function and jumps to it
; @param r0 address of function
; @param r1 size of function
; @param r2 xor key

mov   r4, r0
XOR_JMP_LOOP:
loadb r3, r0
xor   r3, r3, r2
storb r0, r3
add   r0, 1
sub   r1, 1
cmp   r1, 0
jne   XOR_JMP_LOOP
mov   rip, r4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's time to start getting into the &lt;tt class="docutils literal"&gt;CheckerFunction&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;; r4 receives one byte of input
in r4

; r7 points to a buffer where we store input
storb r7, r4
add   r7, 1

; FUNCTION_SIZE is determined at assemble time to be the greater size of FUNC0 and FUNC1
mov r1, FUNCTION_SIZE

; r0 receives the address of the next CheckerFunction if the least significant bit of input is 0
mov r0, FUNC0_LABEL

; r2 receives the XOR byte to decrept FUNC0
mov r2, FUNC0_XORBYTE

; check LSB of input
and r4, 1
cmp r4, 0

; jump straight to xor_jmp if LSB is 0
je 0x8

; otherwise we set parameters for LSB=1
mov r0, FUNC1_LABEL
mov r2, FUNC1_XORBYTE

; xor_jmp will decrypt the next CheckerFunction and jump to it
jmp xor_jmp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I ran into a size problem while creating this challenge. HSVM has only has 64kb of addressable memory and I was coming in a little fat. &lt;tt class="docutils literal"&gt;CheckerFunction&lt;/tt&gt; is written to be reasonably small. At assemble time the greatest size of the two following functions will be determined and sent to xor_jmp. There is only instance where sizes will differ, and this is when of the following &lt;tt class="docutils literal"&gt;CheckerFunction&lt;/tt&gt; is actually &lt;tt class="docutils literal"&gt;CheckerSuccess&lt;/tt&gt;. Because both &lt;tt class="docutils literal"&gt;CheckerFail&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;CheckerSuccess&lt;/tt&gt; will cause program termination and have no successor functions, the corruption on &lt;tt class="docutils literal"&gt;xor&lt;/tt&gt; decryption past the last &lt;tt class="docutils literal"&gt;CheckerFail&lt;/tt&gt; doesn't matter.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;CheckerFunction&lt;/tt&gt; functions are recursively generated. Here is some abbreviated python code to explain the process:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;CheckerFunction&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;MAX_DEPTH&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;func0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckerFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;func1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckerFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_checker_function_name&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="c"&gt;# f += get and store one byte of input&lt;/span&gt;
        &lt;span class="c"&gt;# f += set number of bytes to decrypt&lt;/span&gt;
        &lt;span class="c"&gt;# f += set next decryption function based on LSB&lt;/span&gt;
        &lt;span class="c"&gt;# f += decrypt and jump to next function&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;

    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;correct_bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;flag_bits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;correct_bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;correct_bits&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_checker_function_name&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

            &lt;span class="c"&gt;#f = Check to make sure input was correct&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;

        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_checker_function_name&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

            &lt;span class="c"&gt;#f = print NO&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should be enough understanding to put together the rest of the code used to generate this challenge. Here are the two files you'll need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# hsvmassembler.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Register&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Label&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resolve&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;label &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; is -1&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;relative&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;label &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; is -1&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xffff&lt;/span&gt;

&lt;span class="n"&gt;r0&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;r0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;r1&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;r1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;r2&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;r2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x02&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;r3&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;r3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x03&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;r4&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;r4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x04&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;r5&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;r5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x05&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;r6&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;r6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x06&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;r7&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;r7&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rbp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;rbp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x08&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rsp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;rsp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x09&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;rip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x07&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;imm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Instruction&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mnemonic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mnemonic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mnemonic&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mnemonic&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Arith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rhs&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mnemonic&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
                   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
                   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
                   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mnemonic&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x10&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x11&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mnemonic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;add&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sub&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x12&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x13&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mnemonic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;sub&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mul&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x14&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x15&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mnemonic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mul&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Div&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x16&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x17&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mnemonic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mod&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x18&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x19&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mnemonic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mod&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;And&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x1A&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x1B&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mnemonic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;and&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x1C&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x1D&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mnemonic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;or&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Xor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Arith&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x1E&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x1F&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mnemonic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;xor&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cmp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lhs&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rhs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rhs&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mnemonic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cmp&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x53&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x54&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x54&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rhs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CondJmp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Je&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CondJmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;CondJmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x21&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Jne&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CondJmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;CondJmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x22&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Jl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CondJmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;CondJmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x23&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Jle&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CondJmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;CondJmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x24&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Jg&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CondJmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;CondJmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x25&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Jge&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CondJmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;CondJmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x26&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Call&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x28&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x27\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x27\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Jmp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x20\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x20\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Ret&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x29&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoadOp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Load&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoadOp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;LoadOp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x31&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x30&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Loadb&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoadOp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;LoadOp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x33&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x32&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StorOp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Stor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StorOp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;StorOp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x35&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x34&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Storb&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StorOp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;StorOp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x37&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x36&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Push&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x42&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x43\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x43\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x44&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;In&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x40&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Out&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x41&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mov&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x51&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x52&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x52&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;imm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hlt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x60&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Nop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x90&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Syscall&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x61&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hsvmassembler&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;FLAG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;FLAGHERE12&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;MAX_DEPTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FLAG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;GEN_FUNCTION_I&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="n"&gt;STR_NO_ADDR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;STR_YES_ADDR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;

&lt;span class="n"&gt;R7_INPUT_ADDR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xffc0&lt;/span&gt;

&lt;span class="n"&gt;flag_bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;FLAG&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;flag_bits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;flag_bits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag_bits&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Function&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instructions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xorbyte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_address&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asm&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;instruction&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instructions&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;instruction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asmxor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;xorbytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;xorbytes&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xorbyte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;xorbytes&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ins&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen_label&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;



&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    xor_jmp&lt;/span&gt;
&lt;span class="sd"&gt;    r0 = address of function&lt;/span&gt;
&lt;span class="sd"&gt;    r1 = size of function&lt;/span&gt;
&lt;span class="sd"&gt;    r2 = xor key&lt;/span&gt;
&lt;span class="sd"&gt;    killed: r0, r1, r2, r3, r4&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;xor_jmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;xor_jmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;xor_jmp_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gen_label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;xor_jmp_loop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Loadb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Xor&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Storb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sub&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cmp&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Jne&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xor_jmp_loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    str_out&lt;/span&gt;
&lt;span class="sd"&gt;    r0 = address of string&lt;/span&gt;
&lt;span class="sd"&gt;    killed: r0, r1&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;str_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;str_out&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Loadb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;str_out_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gen_label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;str_out_loop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Loadb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Jne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ret&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;



&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen_checker_function_name&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;GEN_FUNCTION_I&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;checker_function_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GEN_FUNCTION_I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;GEN_FUNCTION_I&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;CheckerFunction&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;MAX_DEPTH&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;func0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckerFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;func1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckerFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_checker_function_name&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="c"&gt;# get 1 byte of input&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;                 &lt;span class="c"&gt;# 1&lt;/span&gt;
        &lt;span class="c"&gt;# store input byte&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Storb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;          &lt;span class="c"&gt;# 2&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;             &lt;span class="c"&gt;# 3&lt;/span&gt;
        &lt;span class="c"&gt;# either the functions to decrypt will be the same size&lt;/span&gt;
        &lt;span class="c"&gt;# or they will be final, so pick the biggest size and&lt;/span&gt;
        &lt;span class="c"&gt;# decrypt that size&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;func0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
        &lt;span class="c"&gt;# check LSB&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c"&gt;# 7&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xorbyte&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c"&gt;# 9&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;And&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;             &lt;span class="c"&gt;# 4&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;             &lt;span class="c"&gt;# 5&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Je&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;                 &lt;span class="c"&gt;# 6&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c"&gt;# 11&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xorbyte&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c"&gt;# 13&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Jmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;     &lt;span class="c"&gt;# 14&lt;/span&gt;

        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func0&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;

    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;correct_bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;flag_bits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;correct_bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;correct_bits&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;correct_bits&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_checker_function_name&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R7_INPUT_ADDR&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Jmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;die_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gen_label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;correct_die&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;STR_NO_ADDR&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Hlt&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;flag_char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;FLAG&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag_char&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Loadb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Jne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;die_label&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;STR_YES_ADDR&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Hlt&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;

        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_checker_function_name&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;STR_NO_ADDR&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Hlt&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;


&lt;span class="c"&gt;# Generate checker functions&lt;/span&gt;
&lt;span class="n"&gt;checkerFunctions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckerFunction&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;

&lt;span class="c"&gt;# create entry function&lt;/span&gt;
&lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;entry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R7_INPUT_ADDR&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkerFunctions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkerFunctions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkerFunctions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xorbyte&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Jmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# set address for static functions&lt;/span&gt;
&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c"&gt;# set checker function addresses&lt;/span&gt;
&lt;span class="n"&gt;CFAddr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setCFAddress&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkerFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;CFAddr&lt;/span&gt;
    &lt;span class="n"&gt;checkerFunction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CFAddr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkerFunction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkerFunction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xorbyte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;CFAddr&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;checkerFunction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkerFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;func0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;setCFAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkerFunction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkerFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;func1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;setCFAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkerFunction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;setCFAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkerFunctions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    0000  = JMP to entry&lt;/span&gt;
&lt;span class="sd"&gt;    0004  = NO\x00\x00&lt;/span&gt;
&lt;span class="sd"&gt;    0008  = YES\x00&lt;/span&gt;
&lt;span class="sd"&gt;    0010  = ENTRY FUNCTION&lt;/span&gt;
&lt;span class="sd"&gt;    ????  = xor_jmp&lt;/span&gt;
&lt;span class="sd"&gt;    ????  = str_out&lt;/span&gt;
&lt;span class="sd"&gt;    ???? = checker_functions&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# set up up binary&lt;/span&gt;
&lt;span class="nb"&gt;bytes&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Jmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;NO&lt;/span&gt;&lt;span class="se"&gt;\x00\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;YES&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00\x00\x00\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;xor_jmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;str_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# get xor bytes for checker functions&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;asmxor_checkerFunctions&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkerFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;checkerFunction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asmxor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkerFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;func0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;asmxor_checkerFunctions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkerFunction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkerFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;func1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;asmxor_checkerFunctions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkerFunction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;asmxor_checkerFunctions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkerFunctions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;re101.bin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="ctf-writeup"></category></entry><entry><title>Mach-O File Format</title><link href="http://tfpwn.rainbowsandpwnies.com/mach-o-file-format.html" rel="alternate"></link><updated>2013-03-27T20:00:00-05:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2013-03-27:mach-o-file-format.html</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://github.com/endeav0r/rdis2"&gt;Rdis2&lt;/a&gt;, the rewrite of &lt;a class="reference external" href="http://github.com/endeav0r/rdis"&gt;rdis&lt;/a&gt;, will include support for the Mach-O file format. In addition, I will be writing a mach-o plug-in for &lt;a class="reference external" href="https://github.com/simsong/bulk_extractor"&gt;bulk_extractor&lt;/a&gt; in the near future. &lt;a class="reference external" href="http://github.com/endeav0r/macho-dump"&gt;I have been hacking away to discover how the Mach-O file format works&lt;/a&gt;. Here's what you need to know in order to jump-start your understanding.&lt;/p&gt;
&lt;p&gt;Mach-O, like many other executable formats, contains separate structures for 32 and 64-bit versions of programs. The layout of these structs is essentially equivalent, and for brevity we will only cover the 32-bit version of these structs.&lt;/p&gt;
&lt;p&gt;This is a quick run-through. If you're unfamiliar with executable formats, this may not be the article for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="struct-fat-header"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;struct fat_header&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;If you're disassembling binaries found in Mac OS X, you're probably going to encounter fat binaries. Fat binaries are containers which hold multiple, complete mach-o binaries within.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;fat_header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;nfat_arch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cp"&gt;#define FAT_MAGIC   0xcafebabe&lt;/span&gt;
&lt;span class="cp"&gt;#define FAT_CIGAM   0xbebafeca&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;magic&lt;/tt&gt; will contain the value &lt;tt class="docutils literal"&gt;0xcafebabe&lt;/tt&gt; or, if the binary is encoded in the reverse endian-ness of the machine you're parsing with, &lt;tt class="docutils literal"&gt;0xbebafeca&lt;/tt&gt;. If you encounter &lt;tt class="docutils literal"&gt;FAT_CIGAM&lt;/tt&gt;, understand the rest of the &lt;tt class="docutils literal"&gt;fat_*&lt;/tt&gt; values will be reversed in endianness.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;nfat_arch&lt;/tt&gt; will contain the number of &lt;tt class="docutils literal"&gt;struct fat_arch&lt;/tt&gt; structs immediately following &lt;tt class="docutils literal"&gt;struct fat_header&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="struct-fat-arch"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;struct fat_arch&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;struct fat_arch&lt;/tt&gt; contains information about each of the mach-o binaries contained within the fat binary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;fat_arch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;cputype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;cpusubtype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;align&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;struct fat_arch&lt;/tt&gt; is fairly self-explanatory. It will have the same endian-ness of &lt;tt class="docutils literal"&gt;struct fat_header&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The file &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;mach-o/loader.h&lt;/span&gt;&lt;/tt&gt; contains several &lt;tt class="docutils literal"&gt;#define&lt;/tt&gt; for &lt;tt class="docutils literal"&gt;CPU_TYPE&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;CPU_SUBTYPE&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;offset&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;size&lt;/tt&gt; describe the portion of the mach-o file containing the architecture-specific mach-o.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="struct-mach-header"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;struct mach_header&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;struct mach_header&lt;/tt&gt; is the traditional first header of a mach-o binary. It appears as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;mach_header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;cputype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// typedef as int in mach/machine.h&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;cpusubtype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// typedef as int in mach/machine.h&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;filetype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;ncmds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;sizeofcmds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cp"&gt;#define MH_MAGIC 0xfeedface&lt;/span&gt;
&lt;span class="cp"&gt;#define MH_CIGAM 0xcdfaedfe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similar to &lt;tt class="docutils literal"&gt;struct fat_header&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;struct mach_header&lt;/tt&gt; begins with a 4-byte magic value. Depending on the magic value the endian-ness of the mach-o binary in relation to the host architecture can be determined. This endian-ness may be different than that found in &lt;tt class="docutils literal"&gt;struct fat_header&lt;/tt&gt;, and from this point you should consider the mach-o a separate, self-contained file.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;cputype&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;cpusubtype&lt;/tt&gt; have the same meaning (and values) as found in &lt;tt class="docutils literal"&gt;struct fat_arch&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;filetype&lt;/tt&gt; has one of the following values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define MH_OBJECT       0x1&lt;/span&gt;
&lt;span class="cp"&gt;#define MH_EXECUTE      0x2&lt;/span&gt;
&lt;span class="cp"&gt;#define MH_FVMLIB       0x3&lt;/span&gt;
&lt;span class="cp"&gt;#define MH_CORE         0x4&lt;/span&gt;
&lt;span class="cp"&gt;#define MH_PRELOAD      0x5&lt;/span&gt;
&lt;span class="cp"&gt;#define MH_DYLIB        0x6&lt;/span&gt;
&lt;span class="cp"&gt;#define MH_DYLINKER     0x7&lt;/span&gt;
&lt;span class="cp"&gt;#define MH_BUNDLE       0x8&lt;/span&gt;
&lt;span class="cp"&gt;#define MH_DYLIB_STUB   0x9&lt;/span&gt;
&lt;span class="cp"&gt;#define MH_DSYM         0xa&lt;/span&gt;
&lt;span class="cp"&gt;#define MH_KEXT_BUNDLE  0xb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Immediately following &lt;tt class="docutils literal"&gt;struct mach_header&lt;/tt&gt; are a series of load commands. The number of load commands, as well as the combined size of these commands in bytes, is found in &lt;tt class="docutils literal"&gt;ncmds&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;sizeofcmds&lt;/tt&gt;. The size of each one of these load commands is dependent on the type of load command.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;flags&lt;/tt&gt; contains a series of flags, also available in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;mach-o/loader.h&lt;/span&gt;&lt;/tt&gt; that we will not discuss here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="struct-load-command"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;struct load_command&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;struct load_command&lt;/tt&gt; is a common 8-byte header to all load commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;load_command&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;cmdsize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;mach-o/loader.h&lt;/span&gt;&lt;/tt&gt; contains a series of &lt;tt class="docutils literal"&gt;#define&lt;/tt&gt; pragmas with values for &lt;tt class="docutils literal"&gt;cmd&lt;/tt&gt;. We can determine the size of this load command from &lt;tt class="docutils literal"&gt;cmdsize&lt;/tt&gt; and skip over it accordingly if we find it uninteresting.&lt;/p&gt;
&lt;p&gt;The few load commands we will cover are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define LC_SEGMENT 0x1&lt;/span&gt;
&lt;span class="cp"&gt;#define LC_SYMTAB  0x2&lt;/span&gt;
&lt;span class="cp"&gt;#define LC_THREAD  0x4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="struct-segment-command-and-struct-section"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;struct segment_command&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;struct section&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;struct segment_command&lt;/tt&gt; contains information necessary to load a portion of the mach-o file into memory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;segment_command&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;cmdsize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;     &lt;span class="n"&gt;segname&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;vmaddr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;vmsize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;fileoff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;filesize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;maxprot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;initprot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;nsects&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each segment is followed by a series of sections which include specific information about a section of the file to load into memory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;        &lt;span class="n"&gt;sectname&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;        &lt;span class="n"&gt;segname&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt;    &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt;    &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt;    &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt;    &lt;span class="n"&gt;align&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt;    &lt;span class="n"&gt;reloff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt;    &lt;span class="n"&gt;nreloc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt;    &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt;    &lt;span class="n"&gt;reserved1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt;    &lt;span class="n"&gt;reserved2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of explaining each field for &lt;tt class="docutils literal"&gt;struct segment_command&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;struct section&lt;/tt&gt;, many of which are self-explanatory, I'll include an example of a segment_command with sections.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;load_command SEGMENT
lc-&amp;gt;cmdsize  1d0
  segname  __TEXT
  vmaddr   1000
  vmsize   18000
  fileoff  0
  filesize 18000
  maxprot  READ WRITE EXECUTE
  initprot READ EXECUTE
  nsects   6
  flags    FVMLIB NORELOC
    section 0
      sectname __text
      segname  __TEXT
      addr     184c
      size     12826
      offset   84c
      align    2
      reloff   0
      nreloc   0
      flags    ATTR_PURE_INSTRUCTIONS SECTION_ATTRIBUTES_SYS ATTR_SOME_INSTRUCTIONS
    section 1
      sectname __symbol_stub
      segname  __TEXT
      addr     14072
      size     1aa
      offset   13072
      align    1
      reloff   0
      nreloc   0
      flags    ATTR_PURE_INSTRUCTIONS SECTION_ATTRIBUTES_SYS ATTR_SOME_INSTRUCTIONS ATTR_LOC_RELOC SYMBOL_STUBS

    section 2
      sectname __stub_helper
      segname  __TEXT
      addr     1421c
      size     2d4
      offset   1321c
      align    2
      reloff   0
      nreloc   0
      flags    ATTR_PURE_INSTRUCTIONS SECTION_ATTRIBUTES_SYS ATTR_SOME_INSTRUCTIONS ATTR_LOC_RELOC
    section 3
      sectname __cstring
      segname  __TEXT
      addr     144f0
      size     4a83
      offset   134f0
      align    4
      reloff   0
      nreloc   0
      flags    2
    section 4
      sectname __const
      segname  __TEXT
      addr     18f80
      size     30
      offset   17f80
      align    4
      reloff   0
      nreloc   0
      flags    0
    section 5
      sectname __unwind_info
      segname  __TEXT
      addr     18fb0
      size     48
      offset   17fb0
      align    0
      reloff   0
      nreloc   0
      flags    0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="rdis2"></category><category term="disassembly"></category></entry><entry><title>A Method for Emulated Disassembly</title><link href="http://tfpwn.rainbowsandpwnies.com/a-method-for-emulated-disassembly.html" rel="alternate"></link><updated>2013-02-18T11:00:00-06:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2013-02-18:a-method-for-emulated-disassembly.html</id><summary type="html">&lt;p&gt;Last night I wrote a simple emulated disassembler for rdis. I will elaborate more on how to use this disassembler as it becomes more complete, but I'm going to start this blog post with some results.&lt;/p&gt;
&lt;p&gt;Observe the following x86 program:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;%define SYS_EXIT  1&lt;/span&gt;

&lt;span class="k"&gt;section&lt;/span&gt; &lt;span class="nv"&gt;.text&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="nv"&gt;_start&lt;/span&gt;

&lt;span class="nf"&gt;_start&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="nv"&gt;one&lt;/span&gt;

&lt;span class="nf"&gt;one&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0x8048061&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
    &lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="nv"&gt;_start&lt;/span&gt;

&lt;span class="nf"&gt;two&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;SYS_EXIT&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="mh"&gt;0x80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This program is what some people would describe as polymorphic. A naive recursive disassembly yields the following block:&lt;/p&gt;
&lt;img alt="" src="http://tfpwn.rainbowsandpwnies.com/files/ins32_graph_wrong.png" /&gt;
&lt;p&gt;An emulated disassembly yields the following program (vocabulary changed intentionally):&lt;/p&gt;
&lt;img alt="" src="http://tfpwn.rainbowsandpwnies.com/files/ins32_graph.png" /&gt;
&lt;p&gt;Notice we have multiple disassembles for an instruction at address 0x8048060.&lt;/p&gt;
&lt;p&gt;In the rest of this blog post I explain the method in which I generated this CFG.&lt;/p&gt;
&lt;p&gt;Given a function &lt;tt class="docutils literal"&gt;Emulator&lt;/tt&gt;, which takes as its input an ordered set of numbers &lt;tt class="docutils literal"&gt;Memory&lt;/tt&gt; and an index &lt;tt class="docutils literal"&gt;Address&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Emulator&lt;/tt&gt; returns:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A boolean condition indicating whether the inputs were valid for &lt;tt class="docutils literal"&gt;Emulator&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;An &lt;tt class="docutils literal"&gt;Instruction&lt;/tt&gt; disassembled at &lt;tt class="docutils literal"&gt;Address&lt;/tt&gt; passed to &lt;tt class="docutils literal"&gt;Emulator&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;A new &lt;tt class="docutils literal"&gt;Memory&lt;/tt&gt; to be passed back into &lt;tt class="docutils literal"&gt;Emulator&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;A new &lt;tt class="docutils literal"&gt;Address&lt;/tt&gt; to be passed back into &lt;tt class="docutils literal"&gt;Emulator&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have a directional graph &lt;tt class="docutils literal"&gt;Graph&lt;/tt&gt;, with vertices &lt;tt class="docutils literal"&gt;V&lt;/tt&gt; and edges &lt;tt class="docutils literal"&gt;E&lt;/tt&gt;, as are typical of directional graphs, such that any edge &lt;tt class="docutils literal"&gt;e&lt;/tt&gt; of &lt;tt class="docutils literal"&gt;E&lt;/tt&gt; is an ordered tuple of vertices &lt;tt class="docutils literal"&gt;vHead&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;vTail&lt;/tt&gt; of &lt;tt class="docutils literal"&gt;V&lt;/tt&gt; where &lt;tt class="docutils literal"&gt;vHead&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;vTail&lt;/tt&gt; must exist in the set &lt;tt class="docutils literal"&gt;V&lt;/tt&gt;, and there may exist only one &lt;tt class="docutils literal"&gt;e&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;E&lt;/tt&gt; for any ordered tuple &lt;tt class="docutils literal"&gt;vHead&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;vTail&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We have the following functions which operate over Graph:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;NewVertex(Graph)&lt;/tt&gt; -&amp;gt; Returns a new vertex in &lt;tt class="docutils literal"&gt;Graph&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;NewEdge(Graph, vHead, vTail)&lt;/tt&gt; -&amp;gt; Creates a new edge in the &lt;tt class="docutils literal"&gt;Graph&lt;/tt&gt;, enforcing the conditions of &lt;tt class="docutils literal"&gt;Graph&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have a function &lt;tt class="docutils literal"&gt;Map&lt;/tt&gt; which takes as its input an &lt;tt class="docutils literal"&gt;Address&lt;/tt&gt; and returns as its result a vertex &lt;tt class="docutils literal"&gt;v&lt;/tt&gt; of &lt;tt class="docutils literal"&gt;V&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Our algorithm may then look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;zero(Graph)
zero(Map)

LastVertex = Nil

while Emulator(Memory, Address)&amp;#39;Valid
    if Map(Address) exists
        v = Map(Address)

        if v&amp;#39;Instruction != Emulator(Memory, Address)&amp;#39;Instruction
            v = NewVertex(Graph)
            v&amp;#39;Instruction = Emulator(Memory, Address)&amp;#39;Instruction
            Map(Address) = v

    else
        v = NewVertex(Graph)
        v&amp;#39;Instruction = Emulator(Memory, Address)&amp;#39;Instruction
        Map(Address) = v

    NewEdge(Graph, LastVertex, v)
    LastVertex = v
    Memory, Address = Emulator(Memory, Address)&amp;#39;Step
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="rdis"></category><category term="disassembly"></category><category term="theory"></category></entry><entry><title>A Magical Time-Traveling Control Flow Graph</title><link href="http://tfpwn.rainbowsandpwnies.com/a-magical-time-traveling-control-flow-graph.html" rel="alternate"></link><updated>2013-02-18T02:24:00-06:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2013-02-18:a-magical-time-traveling-control-flow-graph.html</id><summary type="html">&lt;p&gt;I wrote previously about how control flow graphs should show the evolution of a program over time. I've since begun hacking out an x86 emulator and including it in rdis in order to illustrate the point.&lt;/p&gt;
&lt;p&gt;The following graph may be a bit buggy (I literally just wrote the code), but I believe it does a decent job of illustrating what I believe CFGs should look like. Compare a naive disassembly of a shikata_ga_nai encoded linux x86 bind_shell, and the following (perhaps incomplete) emulated disassembly of the same program:&lt;/p&gt;
&lt;img alt="" class="align-center" src="http://tfpwn.rainbowsandpwnies.com/files/cfgmagic-two.png" /&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;img alt="" class="align-center" src="http://tfpwn.rainbowsandpwnies.com/files/shikata_ga_graph.png" /&gt;
</summary><category term="rdis"></category><category term="disassembly"></category></entry><entry><title>Control Flow Graphs Should Be Magical Time-Traveling Devices</title><link href="http://tfpwn.rainbowsandpwnies.com/control-flow-graphs-should-be-magical.html" rel="alternate"></link><updated>2013-02-14T00:55:00-06:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2013-02-14:control-flow-graphs-should-be-magical.html</id><summary type="html">&lt;p&gt;If you didn't know, I've spent some time recently writing a disassembler and thinking about disassembly. I'm going to outline some of my thoughts on where I think disassembly needs to go. There are gaps in this post. Consider it food for thought.&lt;/p&gt;
&lt;p&gt;We currently have two methods for disassembling programs. We have linear/sweep disassembly, where bytes are disassembled immediately following one another. We also have recursive disassembly, where we look at each instruction to determine its successors. The problem with both of these methods is we're not treating instructions like data.&lt;/p&gt;
&lt;p&gt;We need to treat disassembly as a state-ful experience. We are analyzing a living, breathing program, not a static, ordered series of numbers. We need to treat disassembly as a product of data-flow analysis. By adding additional intelligence to our disassembly process, and changing our expectations of what a disassembly tool should give us, we will get more meaningful data, I mean code, well, same thing.&lt;/p&gt;
&lt;p&gt;We need to emulate (perhaps symbolically) our program's behavior during runtime. During this analysis, instead of saving the values possible at various portions of our program's execution we should be saving the statements to be executed. This is the data which belongs in our control-flow graphs.&lt;/p&gt;
&lt;p&gt;Take a look at a shikata_ga_nai encoded x86 linux bind_tcp payload from metasploit&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;msfpayload linux/x86/shell/bind_tcp R | msfencode -e x86/shikata_ga_nai -t elf &amp;gt; /tmp/payload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I graph this executable in rdis, I get the following:&lt;/p&gt;
&lt;img alt="" class="align-center" src="http://tfpwn.rainbowsandpwnies.com/files/cfgmagic-two.png" /&gt;
&lt;p&gt;Wow, this isn't even remotely correct. These are not the instructions that will be interpreted by our CPU. This is not the program contained in my /tmp/payload executable. These are just the bytes that were present at the time we conducted recursive disassembly. Programs are composed of data. They are state-ful. This graph isn't very helpful.&lt;/p&gt;
&lt;p&gt;It's state-less.&lt;/p&gt;
&lt;p&gt;We should think of our CFGs as a journey through the execution of our program. At each stop in our journey we extract one specific piece of information, the statement to be executed, and we save it in a graph.&lt;/p&gt;
&lt;p&gt;Caveat: There's an obvious problem with this approach. If we attempt to perfectly disassemble our programs in this manner we may encounter (possibly maliciously induced) explosive growth in our CFG, making this problem infeasible for machines with finite memory. In all practicality, we may consider this approach impossible to implement perfectly. We will need to apply heuristics and accept imperfect results.&lt;/p&gt;
&lt;p&gt;I propose we begin disassembling our programs in environments which allow us to treat our code as data. We should emulate our programs in limited environments and, as we continue through our program's execution, extract the instructions to be executed. This is what we should be viewing in our CFGs.&lt;/p&gt;
&lt;p&gt;How should we display these CFGs? What happens when the data composing our code does change? Should we go back in time and edit our CFG, or disregard the old data? I have some thoughts.&lt;/p&gt;
&lt;p&gt;An instruction should contain two pieces of information: data and location. When added to our CFG, our CFG should track, &amp;quot;time,&amp;quot; or state.&lt;/p&gt;
&lt;p&gt;Let's start with a simple program, a loop with a conditional branch contained within.&lt;/p&gt;
&lt;img alt="" src="http://tfpwn.rainbowsandpwnies.com/files/cfg-one.png" /&gt;
&lt;p&gt;During our analysis of this program, we discover that the code in [D] is polymorphic. At some point in our execution, an instruction in [D] changes. We will now show our CFG with stateful information.&lt;/p&gt;
&lt;img alt="" src="http://tfpwn.rainbowsandpwnies.com/files/cfg-two.png" /&gt;
&lt;p&gt;Here we have [D] -&amp;gt; [F], which represents [D] in one state, {0}. We also have [G], which represents the altered state of [D]. These nodes are stateful. Let's say [G]'s successor is [A]. How would I display this CFG?&lt;/p&gt;
&lt;img alt="" src="http://tfpwn.rainbowsandpwnies.com/files/cfg-three.png" /&gt;
&lt;p&gt;Because the location and data of [A] has not changed, [G]'s successor [A] remains the original [A]. [A] now includes the data that exists in both state {0} of our program, as well as state {1}.&lt;/p&gt;
&lt;p&gt;As we continue to analyze this function, we discover that the only reachable portions of our CFG in {1} are [A] -&amp;gt; [B], [B] -&amp;gt; [D], [D] -&amp;gt; [G] and [G] -&amp;gt; [A].&lt;/p&gt;
&lt;img alt="" src="http://tfpwn.rainbowsandpwnies.com/files/cfg-four.png" /&gt;
&lt;p&gt;This is the information I want to see when analyzing a program. I want my program interpreted as data, and the state of the program displayed in a visual manner.&lt;/p&gt;
&lt;p&gt;I'll conclude this post for now, with more to follow at a later date.&lt;/p&gt;
</summary><category term="disassembly"></category><category term="theory"></category></entry><entry><title>Again on Instructions: There Is No Spoon</title><link href="http://tfpwn.rainbowsandpwnies.com/again-on-instructions-there-is-no-spoon.html" rel="alternate"></link><updated>2013-01-31T01:38:00-06:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2013-01-31:again-on-instructions-there-is-no-spoon.html</id><summary type="html">&lt;div class="section" id="an-edit-from-the-future"&gt;
&lt;h2&gt;An Edit From the Future&lt;/h2&gt;
&lt;p&gt;I mention the Defcon 20 talk &amp;quot;Programming Weird Machines with ELF Metadata&amp;quot; in this article. After rewatching the video (&lt;a class="reference external" href="https://www.defcon.org/html/links/dc-archives/dc-20-archive.html#Shapiro"&gt;Which you should watch, you are a fool if you don't&lt;/a&gt;), I believe 90% of what you are about to read is merely ideas planted during the this talk, waiting to bloom into realization. The underlying, core concepts here are, &amp;quot;Weird Machines,&amp;quot; which is the result of work done by a number of academics. &lt;a class="reference external" href="http://www.cs.dartmouth.edu/~sergey/langsec/papers/Bratus.pdf"&gt;Here is a link to one of their papers&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="forward"&gt;
&lt;h2&gt;Forward&lt;/h2&gt;
&lt;p&gt;Not surprisingly, I spend a lot of time writing code. Perhaps surprisingly, I spend at least an equal amount of time thinking about the code I write. Sometimes, while thinking about code, I have moments of realization and enlightenment. Things click. Occasionally, during these moments of enlightenment, I start writing them down in a blog post. I rarely make my way through the blog post to completion. Once in a blue moon, I hit submit. The post Thoughts on Instructions was one of these blue moon moments.&lt;/p&gt;
&lt;p&gt;I am lucky to have a single individual who occasionally ventures to my blog and reads my post. After reading Thoughts on Instructions, he politely told me, &amp;quot;What the hell are you talking about dude? You're making little sense.&amp;quot; I'm paraphrasing here, but the point stands.&lt;/p&gt;
&lt;p&gt;This is an attempt to rephrase parts of Thoughts on Instructions.&lt;/p&gt;
&lt;p&gt;Please do not confuse the words &amp;quot;incorrect&amp;quot; with &amp;quot;not useful&amp;quot;. A technique can be useful and bring a wealth of value, yet still be incorrect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="code-is-data"&gt;
&lt;h2&gt;Code is Data&lt;/h2&gt;
&lt;p&gt;To simplify our understanding of systems which operate over instructions, we logically categorize values into two groups, code and data. However &amp;quot;code&amp;quot; is just an artificial label we apply to a subset of these values. In the end, code is just values interpreted by a machine, and at the level these values are interpreted at they should be recognized as data.&lt;/p&gt;
&lt;p&gt;In other words, code is data which can be interpreted by a machine. This is something we should all be familiar with.&lt;/p&gt;
&lt;p&gt;I am reminded of a statement I heard from Sergey Bratus at this previous defcon during the Programming Weird Machines with ELF Metadata talk. I will have to paraphrase, but Sergey stated that ROP chains should be thought of as instructions utilizing the gadgets as a VM. He is right on. When we think about our rop chains at this level of abstraction, those return addresses become instructions for our machine, and we can label the chain itself as code.&lt;/p&gt;
&lt;p&gt;To re-reiterate &amp;quot;code&amp;quot; is just a label we apply to data to simplify our understanding of how this data will be used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="there-is-no-code-it-s-data-all-the-way-down"&gt;
&lt;h2&gt;There is no code. It's data all the way down.&lt;/h2&gt;
&lt;p&gt;Let's start drawing some conclusions.&lt;/p&gt;
&lt;p&gt;Control-Flow Analysis can be thought of as Data-Flow Analysis for the machine which interprets the &amp;quot;code&amp;quot;. We are determining the different values that may be present in the machine which interprets our &amp;quot;code&amp;quot;. For example, when we encounter a conditional jump, our machine's value which holds the next instruction (think a CPUs internal store of the memory fetched from what the instruction pointer points to) can hold a range of values, values that we may label as code.&lt;/p&gt;
&lt;p&gt;If this example is a bit too far-fetched for you, consider performing data-flow analysis on a bytecode VM. What's the data? It's your &amp;quot;code&amp;quot;.&lt;/p&gt;
&lt;p&gt;Because code is merely a label attached to data interpreted by some sort of machine, the only requirements for programming are:
A machine that accepts data and updates some sort of state.
A method of providing the machine with data.
This is why the Defcon talk, Programming Weird Machines with ELF Metadata, was interesting. We have taken a machine, the linux loading process, supplied it with specially crafted data, and we have created a program.&lt;/p&gt;
&lt;p&gt;The concept should not be new to security researchers.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Method&lt;/th&gt;
&lt;th class="head"&gt;Data&lt;/th&gt;
&lt;th class="head"&gt;Machine&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;ROP&lt;/td&gt;
&lt;td&gt;Crafted Stack Frames&lt;/td&gt;
&lt;td&gt;Gadgets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SQLI&lt;/td&gt;
&lt;td&gt;Unsanitized User Input&lt;/td&gt;
&lt;td&gt;SQL Engine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Classic Buffer Overflow&lt;/td&gt;
&lt;td&gt;Oversized User Input&lt;/td&gt;
&lt;td&gt;Native CPU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;XSS&lt;/td&gt;
&lt;td&gt;Attacker-Crafted DHTML/Script&lt;/td&gt;
&lt;td&gt;Web Browser&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;It's no surprise that the majority of defenses/mitigations deal with either attempting to separate data from code (parameterized queries), or restricting data from being executed by a machine (W/X memory protections). It's also no surprise that attackers continue to find new machines (have you HEARD of css injects!?), ways to have their data interpreted regardless (these XSS cheatsheets are getting ridiculous), or a combination of the two (ROP chain to mprotect).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="control-flow-analysis-is-useful"&gt;
&lt;h2&gt;Control-Flow Analysis is useful&lt;/h2&gt;
&lt;p&gt;As reverse-engineers, we need to make sense of data. A large part of this process is the labeling of data as code. In binary analysis, we call this process &amp;quot;disassembling.&amp;quot; Linear, or sweep, disassembly is the process of labeling contiguous blocks of data as code. Recursive disassembly is the process of analyzing disassembled data to discover more data to disassemble. Recursive disassembly is control-flow analysis.&lt;/p&gt;
&lt;p&gt;While not correct, the assumption that code will not change greatly simplifies its analysis and aids in our ability to understand it. Therefor, I'm going to make the statement that Control-Flow Analysis is &amp;quot;stateless&amp;quot;. The analysis is conducted irrespective of state. This may seem a bit off, as code is data and does have state, but if we are going to visualize code we need to make some assumptions.&lt;/p&gt;
&lt;p&gt;Data-Flow Analysis is &amp;quot;state-ful&amp;quot; in that it cannot be done irregardless of state. In fact  it's the study of how state changes over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-thoughts"&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Control-Flow Analysis should be conducted at least each time the state involved in its original analysis changes.&lt;/li&gt;
&lt;li&gt;Reflecting the results of Data-Flow Analysis back into Control-Flow Analysis is incorrect, as it requires using information from the &amp;quot;future&amp;quot; to make decisions about the &amp;quot;present&amp;quot;. It's an unhealthy mixing of stateless and state-ful information.&lt;/li&gt;
&lt;li&gt;We should be searching for new machines that can accept data and update state.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll buy a beer for the first person who writes a compiler to network packets, using a remote machine's TCP/IP stack as a machine to run a program.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="theory"></category></entry><entry><title>Rdis Internals</title><link href="http://tfpwn.rainbowsandpwnies.com/rdis-internals.html" rel="alternate"></link><updated>2013-01-20T13:51:00-06:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2013-01-20:rdis-internals.html</id><summary type="html">&lt;p&gt;As the interested few wishing to hack on rdis begin to trickle in, I believe a basic orientation to the source is due. This walkthrough is not comprehensive, but should be enough to get you on the right track.&lt;/p&gt;
&lt;div class="section" id="contributing-to-rdis"&gt;
&lt;h2&gt;Contributing to rdis&lt;/h2&gt;
&lt;p&gt;The rdis source can be found here: &lt;a class="reference external" href="https://github.com/endeav0r/rdis"&gt;https://github.com/endeav0r/rdis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I ask that you please fork the repo on github and submit a pull request. Don't email me patches unless they are trivially minor. Pull requests are always preferred.&lt;/p&gt;
&lt;p&gt;Development discussion for #rdis takes place in irc.freenode.net#rdis . If you plan on contributing, please join us in #rdis and let me know.&lt;/p&gt;
&lt;p&gt;I don't have an issue with large pull requests, but it will be helpful if you let me know what's coming and what's being changed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-object-container-model"&gt;
&lt;h2&gt;The Object/Container Model&lt;/h2&gt;
&lt;p&gt;Almost everything in rdis is an object. We define an object as a struct which begins to a pointer to a vtable of type &lt;tt class="docutils literal"&gt;struct _object&lt;/tt&gt;. The use of rdis's object model may seem cumbersome and/or annoying at first, but once you get used to it you will find (hopefully) you're writing safer code faster. Here's &lt;tt class="docutils literal"&gt;struct _object&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;json_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, let's take a look at the &lt;tt class="docutils literal"&gt;_queue&lt;/tt&gt; struct:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_queue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_object&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_queue_it&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_queue_it&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The vtable for queue looks as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_object&lt;/span&gt; &lt;span class="n"&gt;queue_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;         &lt;span class="n"&gt;queue_delete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;         &lt;span class="n"&gt;queue_copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;NULL&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every object should include, at a minimum, both delete and copy. This is because objects copy objects. They do this by calling &lt;tt class="docutils literal"&gt;object_copy&lt;/tt&gt;, which can be found in object.h:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define object_copy(XYX) \&lt;/span&gt;
&lt;span class="cp"&gt;    ((struct _object_header *) XYX)-&amp;gt;object-&amp;gt;copy(XYX)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The general-purpose containers available in rdis are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_graph&lt;/tt&gt; - A directed graph (delete/copy/cmp/merge/serialize) ; merge only required of graph_merge() is called&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_list&lt;/tt&gt; - A doubly-linked list (delete/copy/serialize)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_map&lt;/tt&gt; - A mapping of uint64_t to objects (delete/copy/serialize)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_queue&lt;/tt&gt; - A simple queue (delete/copy)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_tree&lt;/tt&gt; - A self-balancing tree (delete/copy/serialize)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;list, graph, map and tree all have iterators. Lists can be modified with their iterators by calling &lt;tt class="docutils literal"&gt;list_remove()&lt;/tt&gt;. Graphs, maps and tree can NOT be modified during iteration. Add the objects you want to delete to a queue and delete them post iteration. The &lt;tt class="docutils literal"&gt;_index&lt;/tt&gt; object is also good for this purpose.&lt;/p&gt;
&lt;p&gt;The objects used internally by containers are to be modified only by their respective container calls. I will not accept code that does otherwise. I have attempted to break this rule several times myself, specifically with graph edges. It has always ended in disaster.&lt;/p&gt;
&lt;p&gt;As stated above, if you pass an object to another object, and the object needs to keep that data, it will call &lt;tt class="docutils literal"&gt;object_copy()&lt;/tt&gt;. If you fetch data from an object, it returns a pointer to that object, NOT a copy.&lt;/p&gt;
&lt;p&gt;The other objects available are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_buffer&lt;/tt&gt; - A simple, dumb buffer of memory.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_function&lt;/tt&gt; - Self-explanatory.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_index&lt;/tt&gt; - Wraps uint64_t in an object so it can be used in containers.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_instruction&lt;/tt&gt; - Self-explanatory.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_label&lt;/tt&gt; - Contains an address, string and label type (IE: LABEL_FUNCTION)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_rdstring&lt;/tt&gt; - An object containing a string. Use of char * strings is preferred.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_reference&lt;/tt&gt; - Information about a data reference from an instruction.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a few special combination of data structures used in rdis:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Loader Graph&lt;/tt&gt; - A graph of lists of instructions.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Function Map&lt;/tt&gt; - A map of addresses to functions.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Label Map&lt;/tt&gt; - A map of addresses to labels.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Memory Map&lt;/tt&gt; - A map of buffers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code that works on these special combinations of data structures does NOT belong in the respective container classes. The code can be stored either where needed, or in util.c.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-loading-process"&gt;
&lt;h2&gt;The loading process&lt;/h2&gt;
&lt;p&gt;Loaders are a special type of object with additional methods. The loader object vtable layout can be found in loader/loader.h . The steps to load a file are as follows:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Call &lt;tt class="docutils literal"&gt;loader_create(const char * filename)&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;loader_create()&lt;/tt&gt; will call the create method of implemented loaders. Loaders return a pointer to a valid loader object if they match the executable, or NULL otherwise.&lt;/li&gt;
&lt;li&gt;Supposing a valid loader was returned by &lt;tt class="docutils literal"&gt;loader_create()&lt;/tt&gt;, we call &lt;tt class="docutils literal"&gt;loader_memory_map()&lt;/tt&gt; to grab the memory map from the loader.&lt;/li&gt;
&lt;li&gt;Using this memory map, we call &lt;tt class="docutils literal"&gt;loader_functions()&lt;/tt&gt; to receive the function map.&lt;/li&gt;
&lt;li&gt;We pass the memory map and function map back to the loader in &lt;tt class="docutils literal"&gt;loader_graph_functions()&lt;/tt&gt;, which recursively disassembles each function.&lt;/li&gt;
&lt;li&gt;Finally, we pass the memory map and functions to &lt;tt class="docutils literal"&gt;loader_labels_functions()&lt;/tt&gt; to label our functions, and retrieve any other labels in the binary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The loaders are designed to disassemble based of state, not the data in the executable file. This is why we continue to pass the memory map back to loader functions. This is important when we write disassembler lua scripts for rdis, as state changes while the executable file remains the same (think debugger -&amp;gt; lua -&amp;gt; rdis).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rdis-callbacks"&gt;
&lt;h2&gt;Rdis callbacks&lt;/h2&gt;
&lt;p&gt;The state of rdis as a whole is contained in the &lt;tt class="docutils literal"&gt;_rdis&lt;/tt&gt; object. Different objects can register callbacks to the &lt;tt class="docutils literal"&gt;_rdis&lt;/tt&gt; object, and they are called when different actions in rdis take place. This is how we update the rdis gui. Generally-speaking, callbacks should not trigger actions that further modify rdis state.&lt;/p&gt;
&lt;p&gt;Each callback is identified by a unique &lt;tt class="docutils literal"&gt;uint64_t&lt;/tt&gt; identifier. The object that creates the callback should keep this identifier so that it may remove itself from the callbacks when deleted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lua-scripting"&gt;
&lt;h2&gt;Lua Scripting&lt;/h2&gt;
&lt;p&gt;There are a few things to remember when writing code that allows lua scripts to interface with rdis objects.&lt;/p&gt;
&lt;p&gt;Lua objects are always copies of rdis objects. They never contain pointers to objects stored externally to their independent lua instance.&lt;/p&gt;
&lt;p&gt;The lua VM is recreated everytime rdis loads a new executable is loaded from outside of lua. When a lua script loads an executable, the lua state is not recreated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rdis-gui"&gt;
&lt;h2&gt;Rdis GUI&lt;/h2&gt;
&lt;p&gt;The _gui struct keeps track of everything happening in the rdis gui. Because the gui is not an rdis object, I'm going to refer to it simply as, &amp;quot;The gui.&amp;quot; All windows should be launched by calling their respective function over the gui, for example &lt;tt class="docutils literal"&gt;gui_funcwindow()&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Rdg stands for Rdis Display Graph, and is an object which turns loader graphs into cairo surfaces. You don't work with rdg directly, just launch rdg windows with &lt;tt class="docutils literal"&gt;gui_rdgwindow()&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="rdis"></category></entry><entry><title>Thoughts on Instructions</title><link href="http://tfpwn.rainbowsandpwnies.com/thoughts-on-instructions.html" rel="alternate"></link><updated>2013-01-20T02:32:00-06:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2013-01-20:thoughts-on-instructions.html</id><summary type="html">&lt;p&gt;The following are my thoughts while contemplating the construction of an Intermediate Representation for rdis. They thoughts difficult to order, but I will put forth a best-effort.&lt;/p&gt;
&lt;p&gt;Rdis is a tool for analyzing a program given a specific state. It is most helpful in the graphing and display of disassembled instructions. However, when we disassemble these instructions, we are making some assumptions, as instructions are also stateful.&lt;/p&gt;
&lt;p&gt;This makes sense, but is something I have not fully considered before. We live in a Von Neumann world where our instructions exist in the same addressable memory as our data. Sure, well formed programs are loaded to have non-executable memory permissions over data, but memory permissions are modifiable at runtime. When we disassemble, we make the assumption that the instructions, and control-flow observable at a specific program state, will not deviate at future states.&lt;/p&gt;
&lt;p&gt;This assumption works fairly well as, in most cases the assumptions hold true. If, however, given a future state, instructions do deviate, we need to disassemble them to discover how our program has changed.&lt;/p&gt;
&lt;p&gt;Rdis does this with the function &lt;tt class="docutils literal"&gt;rdis_update_memory&lt;/tt&gt;. Each function in rdis has its bounds defined in a lattice where the greatest lower bound is the address of the lowest addressable instruction in the function's graph, and the least upper bound is the address of the greatest addressable instruction plus the instruction's size in the function's graph. When we update a region of memory, we check to ensure a function does not overlap the updated region. If it does, we have to regraph the function. We only want to update instructions that change, however, as we may otherwise delete additional properties a user has added to an instruction (read comments). This is some of the most complicated code in rdis, especially considering rdis's only internal representation of code is in a directional graph.&lt;/p&gt;
&lt;p&gt;We now return to our instruction, a stateful variable interpreted by the CPU (which has its own state) to update state, and our use of it in an Intermediate Representation. The purpose of translating an instruction to an IR is to perform analysis over the IR in order to derive understanding from future states. Specifically, the addition of data-flow analysis to control-flow of analysis.&lt;/p&gt;
&lt;p&gt;For those of us familiar with exploitation, we know the purpose of exploitation is, usually, to alter control flow in a manner not originally intended by the author. This will most likely involve altering control-flow in a manner not observable without data-flow analysis.&lt;/p&gt;
&lt;p&gt;This is why we fuzz programs. By introducing data into the equation, we hope to place the program into an invalid state, and by observing the conditions which led to this state we hope to modify our data to alter the control flow in an unintended manner. This is also the purpose of symbolic execution and other forms of abstract analysis, to observe the changes in a program's state based possible sets of data.&lt;/p&gt;
&lt;p&gt;This raises interesting questions about the assumptions we make as we analyze disassembled programs. Let's take a look at the following instructions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  400080:       eb 00                   jmp    0x400082
  400082:       c6 04 25 81 00 40 00    mov    BYTE PTR ds:0x400081,0xa
  400089:       0a
  40008a:       eb f4                   jmp    0x400080
  40008c:       b8 3c 00 00 00          mov    eax,0x3c
  400091:       bf 00 00 00 00          mov    edi,0x0
  400096:       0f 05                   syscall
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following program is available as a valid x86-64 linux executable here: &lt;a class="reference external" href="http://rainbowsandpwnies.com/~endeavor/files/ins"&gt;http://rainbowsandpwnies.com/~endeavor/files/ins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These first three instructions pose an interesting problem for writing a useful disassembler. Given the state presented, clearly the correct disassembly of the instruction at &lt;tt class="docutils literal"&gt;0x400080&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;jmp 0x400082&lt;/tt&gt;. This is because, as stated, instructions have state. However, it's evident the control-flow of this program will be altered once the instruction at &lt;tt class="docutils literal"&gt;0x400082&lt;/tt&gt; has updated state.&lt;/p&gt;
&lt;p&gt;This doesn't seem like much of an issue until you consider the problem of applying data-flow analysis to a CFG to enhance a visual representation of how a program will behave. How should we visualize this program? We could create a CFG that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(400080, jmp 0x400082) -&amp;gt;             \
(400082, mov BYTE [0x400081], 0xa) -&amp;gt; \
(400089, jmp 0x400080) -&amp;gt;             \
(400080, jmp 0x40008c) -&amp;gt;             \
(40008c, mov eax, 0x3c) ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this process would be helpful for a trivial program such as the one described below. However, if we introduce a small loop into the program, such as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mh"&gt;0x100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;do_things&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our graph could become unwieldly, depending on do_things(). Perhaps this example isn't the best. Imagine, instead, the assumption we make when interpreting the meaning behind a call in a program loaded in linux without relro protections. We are assuming our entries in the GOT hold addresses to the entries specified in the ELF's relocations. This is a good assumption, as it is generally valid. However, to say a specific entry in the GOT will hold the address intended by the ELF's relocation entry is not correct, as the correct answer is it depends.&lt;/p&gt;
&lt;p&gt;I want rdis to exhibit some form of predictability and correctness. I believe the more correct answer here is to display the interpretation of a program without data-flow analysis, displaying only the state at a specific point in a program's execution. This means deducing control-flow without applying future data into the equation. The alternative would be an attempt to reflect decisions based on future states of the program back onto the current state. While this will usually lead to valid assumptions, I do not believe it is correct.&lt;/p&gt;
&lt;p&gt;I am looking for thoughts and comments on my thought-process, and to what degree data-flow analysis is useful in a tool such as rdis. I put forth there are numerous tools available for the analysis of how programs will behave, and rdis should be concerned with what the current state of a program reflects. Rdis should attempt to hold true to this statement as much as possible.&lt;/p&gt;
</summary><category term="theory"></category><category term="rdis"></category></entry><entry><title>Hosting Haxathon</title><link href="http://tfpwn.rainbowsandpwnies.com/hosting-haxathon.html" rel="alternate"></link><updated>2012-11-24T18:11:00-06:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2012-11-24:hosting-haxathon.html</id><summary type="html">&lt;p&gt;Haxathon was a continuous, challenge-based security CTF with a focus on exploitation, reverse-engineering, cryptology and general binary-foo magic. Most of the competition took place in the Haxathon Supremacy Virtual Machine, which is a 16-bit big-endian RISC VM.&lt;/p&gt;
&lt;p&gt;While Haxathon challenge servers will remain operational until 07 DEC 2012, I have disabled scoring in order to facilitate the posting of write ups.&lt;/p&gt;
&lt;p&gt;Final Scores of Top 10 Players&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;acez        - 1550&lt;/li&gt;
&lt;li&gt;wont        - 1550&lt;/li&gt;
&lt;li&gt;NiklosKoda  - 1550&lt;/li&gt;
&lt;li&gt;themadllama - 1350&lt;/li&gt;
&lt;li&gt;FrizN       - 1350&lt;/li&gt;
&lt;li&gt;nitin       - 1200&lt;/li&gt;
&lt;li&gt;vonr1ch     - 1000&lt;/li&gt;
&lt;li&gt;414D41      - 850&lt;/li&gt;
&lt;li&gt;ufox        - 850&lt;/li&gt;
&lt;li&gt;ercool      - 850&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="challenges"&gt;
&lt;h2&gt;Challenges&lt;/h2&gt;
&lt;p&gt;&amp;quot;Flag File,&amp;quot; indicates the goal of the challenge is to open a file named, &amp;quot;Flag,&amp;quot; and read the contents.&lt;/p&gt;
&lt;div class="section" id="key-hsvm-50-points"&gt;
&lt;h3&gt;key - HSVM - 50 points&lt;/h3&gt;
&lt;p&gt;This challenge XORed user input with 0x77 and compared it against 8 bytes. If the input matched, the user was given a message indicating success. The bytes required for the success message comprised the flag for this challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="backdoor-hsvm-50-points"&gt;
&lt;h3&gt;backdoor - HSVM - 50 points&lt;/h3&gt;
&lt;p&gt;This challenge reads in input from the data and then jumps directly to first given byte. This is a, &amp;quot;Flag File,&amp;quot; challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="backdoor1-5-hsvm-100-points"&gt;
&lt;h3&gt;backdoor1.5 - HSVM - 100 points&lt;/h3&gt;
&lt;p&gt;This challenge requires the user to enter a name which is compared against a 12 byte string pushed onto the stack. The string is &amp;quot;blackknights&amp;quot;. Once this string has been matched, the server enters a loop where it reads one byte from /dev/urandom, sends this byte to the user, reads one byte from the user, XORs the byte from the user and writes it to a buffer starting from 0x8000. Once the server XORs a byte resulting in 0x99, it jumps to the shellcode at 0x8000. This is a, &amp;quot;Flag File,&amp;quot; challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="backdoor2-hsvm-75-points"&gt;
&lt;h3&gt;backdoor2 - HSVM - 75 points&lt;/h3&gt;
&lt;p&gt;The user inputs shellcode which is XORed with 0x99 and stored at a buffer starting at 0x8000. Once a byte, XORed with 0x99, is equal to 0x00 or 0x0a the server will jump to the shellcode. This is a, &amp;quot;Flag File,&amp;quot; challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="news-hsvm-100-points"&gt;
&lt;h3&gt;news - HSVM - 100 points&lt;/h3&gt;
&lt;p&gt;strcpy buffer overflow of a stack return address with, &amp;quot;Details.&amp;quot; This is a, &amp;quot;Flag File,&amp;quot; challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sum-crypto-200-points"&gt;
&lt;h3&gt;sum - Crypto - 200 points&lt;/h3&gt;
&lt;p&gt;Sum presents the attacker with a custom cryptographic hash with insufficient confusion. It can be solved by a SAT solver in about an hour on a Samsung Series 9 laptop. To score, the attacker must find a message that when hashed results in the 8 byte output of 0000000000000000.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="players-hsvm-200-points"&gt;
&lt;h3&gt;players - HSVM - 200 points&lt;/h3&gt;
&lt;p&gt;Players requires exploitation of a use-after-free vulnerability. The attacker must follow a specific order of allocations and frees, overwrite data for a freed object, and then call a method on that object to gain control of the instruction pointer. The heap allocator and object logic was programmed in HSVM assembly, so the task of figuring out what exactly is happening is a bit daunting itself. This is a, &amp;quot;Flag File,&amp;quot; challenge. The CFG for this challenge is gigantic compared to other haxathon challenges.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="image-hsvm-150-points"&gt;
&lt;h3&gt;image - HSVM - 150 points&lt;/h3&gt;
&lt;p&gt;Image reads in an ASCII art image compressed with RLE. During decompression, the length of decompression for a single byte during RLE is not checked. This allows the attacker to overflow the stack frame with a one byte sequence (0xABAB). This is a, &amp;quot;Flag File,&amp;quot; challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hidden-key-hsvm-125-points"&gt;
&lt;h3&gt;hidden_key - HSVM - 125 points&lt;/h3&gt;
&lt;p&gt;This challenge has nothing to do with hidden keys. This challenge is a buffer overflow with a stack layout of [ret][stack canary][pointer to buf][buf]. The attacker must overwrite the pointer to buf and use this pointer to overwrite memory at an attacker-controlled location. Overwriting the stack canary will cause the program to properly exit. This is a, &amp;quot;Flag File,&amp;quot; challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="checkout-crypto-150-points"&gt;
&lt;h3&gt;checkout - Crypto - 150 points&lt;/h3&gt;
&lt;p&gt;This challenge consists of an insecure format for RC4 encrypting information. The format of encrypted messages consists of a 4 byte length, the message, and a 4 byte additive checksum. By flipping bits 32-bits apart from on another, the attacker may or may not invalidate the checksum. The server will return a message indicating the validity of the checksum. The attacker can use this information to discover the plaintext one bit at a time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="inception-hsvm-150-points"&gt;
&lt;h3&gt;inception - HSVM - 150 points&lt;/h3&gt;
&lt;p&gt;This challenge consists of a VM programmed in HSVM assembly. The attacker must reverse the VM to discover an input that will cause the program to output a message indicating success.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mod48-hsvm-200-points"&gt;
&lt;h3&gt;mod48 - HSVM - 200 points&lt;/h3&gt;
&lt;p&gt;This challenge is a stack frame return address buffer overflow. However, the modulus of each byte against 0x30 is taken and written to the stack. This eliminates a large amount of the HSVM instruction set, and the attacker must return to a function whose address bytes are less than 0x30. Such a function was available. This challenge required a return-to-libc approach to exploit. This was a, &amp;quot;Flag File,&amp;quot; challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="lessons-learned"&gt;
&lt;h2&gt;Lessons Learned&lt;/h2&gt;
&lt;p&gt;End your contest immediately following the last challenge. The last challenge was released 02 NOV 2012. However, Haxathon continues until 07 DEC 2012. Originally we didn't know how many challenges would be present in the complete contest and we wished to leave room for expansion. Instead of planning to expand the contest in time, we should have planned to make the contest more dense in challenges.&lt;/p&gt;
&lt;p&gt;More challenges earlier on. While players unfamiliar with reverse-engineering spent a good deal of time on the first few challenges, several players completed these challenges in under an hour. When first entering a contest, reversers don't enjoy waiting.&lt;/p&gt;
&lt;p&gt;Expect the horde. I ended up posting haxathon on r/netsec. We had over 90 registrations in the next 24 hours. While we handled this well, expectations were closer to 30. As of this writing, 290 players have registered for the Haxathon. 60 players have scored. A few more than that have attempted to score, but they still need to try harder.&lt;/p&gt;
&lt;p&gt;Send an email when your contest starts. We had several players who showed up in IRC after the contest started and said, &amp;quot;Oh, I didn't know this thing had started already.&amp;quot; Those are the people we heard from. A reminder email would have been nice.&lt;/p&gt;
&lt;p&gt;Expect to write all the challenges. In addition to writing the website that hosted haxathon, I also authored the HSVM and all the challenges. Be prepared to write all of the challenges for your contest, and don't count on receiving challenges from outside (or inside) sources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="things-i-believe-we-did-right"&gt;
&lt;h2&gt;Things I believe we did right&lt;/h2&gt;
&lt;p&gt;Log all the bits, lock down the challenges. We log every page a logged-in user visits, all incorrect submissions, all traffic to the web server and challenge server, everything. Additionally, we have code that quickly displays this information in a meaningful manner. We can quickly correlate the actions taken by an IP address or user, the times those actions were taken, and use them to make educated decisions on what people are doing. We had some hiccups, but, to my knowledge, we didn't fall over. Oldgregg was responsible for securing the challenge server, and I believe he did a good job. I watched him work his magic through tmux. Wow.&lt;/p&gt;
&lt;p&gt;Put some simple challenges first, and have someone else quantify, &amp;quot;Simple.&amp;quot; Originally, news was the first challenge. I thought this challenge was straight-forward. I also wrote the entire contest and VM from the ground up. Having someone else take a look at a couple challenges allowed me to rework the early challenges in the competition. Several simpler, easier challenges were written and front-loaded.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="and-in-closing"&gt;
&lt;h2&gt;And... In Closing...&lt;/h2&gt;
&lt;p&gt;If you're interested in haxathon, I encourage you to give it a look. Everything is still operational over at haxathon.com. If you're considering hosting your own contest and have some questions on what that experience is like, feel free to leave a comment or get in touch with me on an individual basis.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="rainbowsandpwnies"></category><category term="haxathon"></category></entry><entry><title>Why Rdis</title><link href="http://tfpwn.rainbowsandpwnies.com/why-rdis.html" rel="alternate"></link><updated>2012-11-17T18:08:00-06:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2012-11-17:why-rdis.html</id><summary type="html">&lt;p&gt;When I began writing rdis, I knew I wanted a visual tool that understood assembled programs in the same manner that I understood assembled programs. Unfortunately, I wasn't able to place my finger on exactly what that understanding was. After reading Chris Eagle's Ida Pro Book, or perhaps more accurately jumping through the book in a few hours, and reading &lt;a class="reference external" href="http://kunststube.net/encoding/"&gt;What Every Programmer Absolutely, Positively Needs To Know About Encodings And Character Sets To Work With Text&lt;/a&gt;, I believe I have reached a definition:&lt;/p&gt;
&lt;p&gt;&amp;quot;The separation of meaning from its storage medium.&amp;quot;&lt;/p&gt;
&lt;p&gt;Let us begin with an ordered set of bytes, &lt;tt class="docutils literal"&gt;{0=0x41, 1=0x42, 2=0x43, 3=0x44}&lt;/tt&gt;. What is the meaning behind these bytes? Well, it depends. It may be a little-endian representation of the ASCII string &lt;tt class="docutils literal"&gt;&amp;quot;ABCD&amp;quot;&lt;/tt&gt;, it may be the address &lt;tt class="docutils literal"&gt;0x41424344&lt;/tt&gt;, it may be the instructions &lt;tt class="docutils literal"&gt;inc eax; inc edx; inc ebx; inc esp;&lt;/tt&gt;, it may be an ordered set of four garbage bytes, it may be a combination of the above, or it may be something else entirely.&lt;/p&gt;
&lt;p&gt;Whatever combination of the above examples we use to extract meaning from the above ordered set of bytes, they key is we extract understanding from, not apply understanding to, this ordered set of bytes.&lt;/p&gt;
&lt;p&gt;Let us assume we will interpret &lt;tt class="docutils literal"&gt;0x41424344&lt;/tt&gt; as the ASCII string &lt;tt class="docutils literal"&gt;&amp;quot;ABCD&amp;quot;&lt;/tt&gt;. What we should not do is create a string reference to address 0 and mark that reference as type string. What we should do is create a string with the value &lt;tt class="docutils literal"&gt;&amp;quot;ABCD&amp;quot;&lt;/tt&gt;. We can add metadata to this string, such as, &amp;quot;This string was found at address 0.&amp;quot;&lt;/p&gt;
&lt;p&gt;Data changes during runtime, and our program may replace our bytes &lt;tt class="docutils literal"&gt;0x41424344&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;0x44434241&lt;/tt&gt;. This does NOT change the meaning or value we extracted from our original value, &lt;tt class="docutils literal"&gt;0x41424344&lt;/tt&gt;. What we have is a new value, and we should extract that value and apply meaning to it appropriately. The immediate difference between these two values is state. The way our program interprets this new value should also affect the way we understand this new value.&lt;/p&gt;
&lt;p&gt;By approaching disassembly in this fashion, we more closely mirror the behavior of the machine which interprets our assembly. Below is one immediate benefit of this approach.&lt;/p&gt;
&lt;p&gt;When rdis disassembles a program, it makes no assumptions about the bytes within the program. Given a set of entry points, it disassembles one instruction. From that instruction we extract a set of addresses that control flow may continue to after that byte. If we naivele disassembe an ordered set of bytes, where disassembly of one instruction begins immediately following the disassembly of a previous instruction, we will not achieve the original meaning of the program.  However, if we recursively extract information from our bytes, we will extract the correct information.&lt;/p&gt;
&lt;p&gt;Because rdis extracts, instead of applies, understanding, we automatically avoid incorrect disassemblies from control flows which defeat naive disassemblies. Rdis understands that given a set of 8 ordered bytes, there may be instructions of varied length beginning at each of those bytes. Instead of applying understanding to the bytes, rdis extracts understanding and could, potentially, arrive at eight separate, correct disassemblies while creating its internal, directed graph representation of the program. Instructions which jump to addresses which are in the middle of what would normally be a naively disassembled instruction do not affect rdis, as bytes in rdis do not have meaning attached to them. Rdis extracts the correct meaning from these bytes.&lt;/p&gt;
</summary><category term="rainbowsandpwnies"></category><category term="haxathon"></category></entry><entry><title>Creating Control Flow Graphs from Assembly</title><link href="http://tfpwn.rainbowsandpwnies.com/creating-control-flow-graphs-from-assembly.html" rel="alternate"></link><updated>2012-10-27T16:12:00-05:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2012-10-27:creating-control-flow-graphs-from-assembly.html</id><summary type="html">&lt;p&gt;Several people doing haxathon have begun, or spoken about, graphing challenges written in HSVM assembly. I'm going to explain the basic process I go through for creating Control Flow Graphs from assembly.&lt;/p&gt;
&lt;p&gt;Assume we have a basic assembly language with four instructions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;OPERATION
BRANCH      (ADDR)
COND_BRANCH (ADDR)
HLT
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An &lt;tt class="docutils literal"&gt;OPERATION&lt;/tt&gt; will cause control flow to pass directly to the next instruction. &lt;tt class="docutils literal"&gt;BRANCH&lt;/tt&gt; will cause execution to continue at a target address. &lt;tt class="docutils literal"&gt;COND_BRANCH&lt;/tt&gt; will cause execution to follow one of two branches. &lt;tt class="docutils literal"&gt;HLT&lt;/tt&gt; will cause execution to, for our purposes, stop.&lt;/p&gt;
&lt;p&gt;Here are some example x86 instructions and how we will classify them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;OPERATION   : add, sub, mov, call
BRANCH      : jmp
COND_BRANCH : jl je jg
HLT         : ret hlt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason we classified these instructions the way we did will become more apparent as we go.&lt;/p&gt;
&lt;p&gt;We will now create a fictitious graphing library. Several are available, or you can use your own. Our library will have the following functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;add_vertex(G, vertex);
add_edge(G, head, tail);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now loop through our instructions in two passes. In the first pass we will create vertices for all the instructions, as well as edges from &lt;tt class="docutils literal"&gt;OPERATION&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;COND_BRANCH&lt;/tt&gt; vertices to the next vertex.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;last_address = -1
last_type    = -1
for ins in instructions {

    add_vertex(G, ins)

    if (    (last_type == OPERATION)
         or (last_type == COND_BRANCH)) {
        add_edge(G, last_address, ins.address)

    if (    (ins.type == HLT)
         or (ins.type == BRANCH))
        break

    last_address = ins.address
    last_type    = ins.type

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will now go through and add edges for &lt;tt class="docutils literal"&gt;BRANCH&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;COND_BRANCH&lt;/tt&gt; instructions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;for ins in instructions {
    if (    (ins.type == BRANCH)
         or (ins.type == COND_BRANCH)) {
        add_edge(G, ins.address, ins.target_address)
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point in time we have a valid control flow graph. However, we have graphs that look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;      |
      V
+------------+
| OPERATION  |
+------------+

      |
      V
+------------+
| OPERATION  |
+------------+

      |
      V
+-------------+
| COND_BRANCH |
+-------------+
      |   \____________

      |                |
      V                V
+------------+  +------------+
| HLT        |  | HLT        |
+------------+  +------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When what we want is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;      |
      V
+-------------+
| OPERATION   |
| OPERATION   |
| COND_BRANCH |
+-------------+
      |   \____________

      |                |
      V                V
+------------+  +------------+
| HLT        |  | HLT        |
+------------+  +------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I'm going to use &lt;em&gt;rednovae terminology&lt;/em&gt; for things which may have official names, but, since I don't know them, &lt;em&gt;rednovae terminology&lt;/em&gt;. &lt;em&gt;Rednovae terminology&lt;/em&gt; will be italicized. &lt;em&gt;Rednovae terminology&lt;/em&gt; my conflict with actual graph theory terminology. Work with me here.&lt;/p&gt;
&lt;p&gt;We need to &lt;em&gt;reduce&lt;/em&gt; our graphs by combining &lt;em&gt;singly-adjacent-vertices&lt;/em&gt;. &lt;em&gt;Singly-adjacent-vertices&lt;/em&gt; are vertices that have an edge between them, with no other edges on those sides of the vertices.&lt;/p&gt;
&lt;p&gt;Now: Given a directional graph &lt;tt class="docutils literal"&gt;D&lt;/tt&gt; with a set of vertices &lt;tt class="docutils literal"&gt;V&lt;/tt&gt; and edges &lt;tt class="docutils literal"&gt;E&lt;/tt&gt;, where each edge &lt;tt class="docutils literal"&gt;e&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;E&lt;/tt&gt; consists of a head &lt;tt class="docutils literal"&gt;H&lt;/tt&gt; and tail &lt;tt class="docutils literal"&gt;T&lt;/tt&gt; &lt;tt class="docutils literal"&gt;(H, T)&lt;/tt&gt; such that &lt;tt class="docutils literal"&gt;H&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;T&lt;/tt&gt; are both elements of &lt;tt class="docutils literal"&gt;V&lt;/tt&gt;, we declare vertices &lt;tt class="docutils literal"&gt;{vA}&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;{vB}&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;{vC}&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;{vD}&lt;/tt&gt; and edges &lt;tt class="docutils literal"&gt;(vA, vB)&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;(vB, vC)&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;(vC, vA)&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;(vC, vD)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This graph looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  {vA}&amp;lt;-\
   |    |
   V    |
  {vB}  |
   |    |
   V    |
  {vC}--/
   |
   V
  {vD)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Starting with &lt;tt class="docutils literal"&gt;(vA)&lt;/tt&gt;, we check its successors. &lt;tt class="docutils literal"&gt;vA&lt;/tt&gt; has one successor, &lt;tt class="docutils literal"&gt;vB&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;vB&lt;/tt&gt; has one predecessor. Therefor, these vertices are &lt;em&gt;singly-adjacent&lt;/em&gt; and we combine them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  {vA+vB}&amp;lt;-\

   |       |
   V       |
  {vC}-----/
   |
   V
  {vD}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now check vertex &lt;tt class="docutils literal"&gt;{vA+vB}&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;{vA+vB}&lt;/tt&gt; has one successor, &lt;tt class="docutils literal"&gt;{vC}&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;{vC}&lt;/tt&gt; has one predecessor, making it &lt;em&gt;singly-adjacent&lt;/em&gt;. We combine &lt;tt class="docutils literal"&gt;{vA+vB}&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;{vC}&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  {vA+vB+vC}&amp;lt;-\

   |     |    |
   V     \----/
  {vD}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now check vertex &lt;tt class="docutils literal"&gt;{vA+vB+vC}&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;{vA+vB+vC}&lt;/tt&gt; has two successors. Therefor it is not &lt;em&gt;singly-adjacent&lt;/em&gt; with any of its successors.&lt;/p&gt;
&lt;p&gt;We move to the next vertex, &lt;tt class="docutils literal"&gt;{vD}&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;{vD}&lt;/tt&gt; has no successors. We move to the next vertex, of which there are none, so we are done.&lt;/p&gt;
&lt;p&gt;This process runs in 2N time for constructing the original graph, where N is the number of instructions found in the assembly, and N time for reducing the graph, where N is the number of vertices found in the original graph.&lt;/p&gt;
&lt;p&gt;To visualize this graph, I recommend you become familiar with graphviz and the dot language. You can loop through all vertices, adding their information to your dot file, and do the same for your edges.&lt;/p&gt;
</summary><category term="rainbowsandpwnies"></category><category term="haxathon"></category></entry><entry><title>Finding SQLI Through Taint Analysis</title><link href="http://tfpwn.rainbowsandpwnies.com/finding-sqli-through-taint-analysis.html" rel="alternate"></link><updated>2012-08-23T18:03:00-05:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2012-08-23:finding-sqli-through-taint-analysis.html</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Two days ago I decided it was time to begin working on my taint analysis engine for PHP. I just looked up a SQLI on exploitdb to see if I could detect it and... success. The vulnerability can be found &lt;a class="reference external" href="http://www.exploit-db.com/exploits/20673/"&gt;here&lt;/a&gt;, a SQLI in &lt;a class="reference external" href="http://www.yourarcadescript.com/"&gt;YourArcadeScript&lt;/a&gt; 2.4 (hereforth known as YAS).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vulnerability-details"&gt;
&lt;h2&gt;Vulnerability Details&lt;/h2&gt;
&lt;p&gt;The vulnerable line is found in &lt;tt class="docutils literal"&gt;templates/modbox_24/category.php&lt;/tt&gt;, line 36.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;38: $count = yasDB_select(&amp;quot;SELECT count(id) AS count FROM `games` where category = &amp;quot; . $_GET[&amp;#39;id&amp;#39;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The file &lt;tt class="docutils literal"&gt;tempates/modbox_24/categories.php&lt;/tt&gt; is included from index.php via line 54.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;53: case &amp;#39;cat&amp;#39;:&lt;/span&gt;
&lt;span class="x"&gt;54:     include (&amp;quot;templates/&amp;quot;.$setting[&amp;#39;theme&amp;#39;].&amp;quot;/category.php&amp;quot;);&lt;/span&gt;
&lt;span class="x"&gt;55:     break;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a trivial SQL Injection and can be found with little effort by my all-time-favorite web-app vulnerability finding application: &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt;. The following line shows multiple concerning queries:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;grep &lt;span class="pre"&gt;-rn&lt;/span&gt; SELECT * | grep GET&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;A few simple greps shows multiple scary queries, but that's beyond the scope of this post. Grep won't give you vulnerabilities such as CSRF, but as a rule, if a webapp doesn't pass the grep test please don't even consider deploying it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-the-engine-for-yas"&gt;
&lt;h2&gt;Configuring the engine for YAS&lt;/h2&gt;
&lt;p&gt;There are four pieces of information our taint analysis engine must know in order to detect this vulnerability. They are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Sources of &lt;tt class="docutils literal"&gt;TAINT&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Functions that &lt;tt class="docutils literal"&gt;SANITIZE&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Functions to alert when variables from &lt;tt class="docutils literal"&gt;TAINT&lt;/tt&gt; are passed to &lt;tt class="docutils literal"&gt;USE&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Constant values for a few select variables.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1-3 are self-explanatory. If not, my last blog post may be helpful.&lt;/p&gt;
&lt;p&gt;We need constant values for variables because YAS has include lines that require variables to have specific values. My taint analysis engine does not store values, only taint. When an include fails to resolve a path, we get an error line like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;could not include BinaryOp(&amp;#39;.&amp;#39;, BinaryOp(&amp;#39;.&amp;#39;, &amp;#39;templates/&amp;#39;, ArrayOffset(Variable(&amp;#39;$setting&amp;#39;), &amp;#39;theme&amp;#39;)), &amp;#39;/play.php&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Normally this means we need to set a value for &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ArrayOffset(Variable('$setting'),&lt;/span&gt; 'theme)&lt;/tt&gt;. In this specific case, the value has already been set to &lt;tt class="docutils literal"&gt;&amp;quot;modbox_24&amp;quot;&lt;/tt&gt; and the file &lt;tt class="docutils literal"&gt;templates/modbox_24/play.php&lt;/tt&gt; does not exist.&lt;/p&gt;
&lt;p&gt;For YAS, we only set one value in &lt;tt class="docutils literal"&gt;DEFINES&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DEFINES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;DEFINES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ArrayOffset(Variable(&amp;#39;$setting&amp;#39;), &amp;#39;theme&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;modbox_24&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to set 1-3. Sources of TAINT do not change. Currently I am only checking $_GET and $_POST.&lt;/p&gt;
&lt;p&gt;The values for SANITIZE and USE are set as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SANITATION_FUNCTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;intval&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;yasDB_clean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;htmlspecialchars&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;TARGET_FUNCTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;yasDB_select&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;yasDB_update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;yasDB_insert&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="running-the-engine-and-results"&gt;
&lt;h2&gt;Running the engine and results&lt;/h2&gt;
&lt;p&gt;Now all that's left is to execute the engine against index.php. Here's what we get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[endeavor@endeavor php-static]$ time pypy analyze.py ~/sources/yas/index.php
======================================
ANALYZING:  /home/endeavor/sources/yas/index.php
could not include includes/db_functions.inc.php includes/db_functions.inc.php
could not include includes/config.inc.php includes/config.inc.php
could not include seourl.class.php seourl.class.php
could not include BinaryOp(&amp;#39;.&amp;#39;, BinaryOp(&amp;#39;.&amp;#39;, &amp;#39;templates/&amp;#39;, ArrayOffset(Variable(&amp;#39;$setting&amp;#39;), &amp;#39;theme&amp;#39;)), &amp;#39;/small_footer.php&amp;#39;) templates/modbox_24/small_footer.php
could not include rightcolumn.php rightcolumn.php
function :  yasDB_select
parameter:  SELECT count(id) AS count FROM `games` where category = $_GET
tainted  :  [&amp;#39;$page&amp;#39;]
function :  yasDB_select
parameter:  SELECT * FROM `games` where category = $_GET order by `id` desc LIMIT ObjectProperty(Variable(&amp;#39;$pageurl&amp;#39;), &amp;#39;start&amp;#39;), ObjectProperty(Variable(&amp;#39;$pageurl&amp;#39;), &amp;#39;limit&amp;#39;)
tainted  :  [&amp;#39;$page&amp;#39;]
could not include rightcolumn.php rightcolumn.php
function :  yasDB_select
parameter:  SELECT * FROM user WHERE username=&amp;#39;$username&amp;#39; AND email=&amp;#39;$useremail&amp;#39;
tainted  :  [&amp;#39;$username&amp;#39;, &amp;#39;$useremail&amp;#39;]
function :  yasDB_update
parameter:  UPDATE user SET password=&amp;#39;$upassword&amp;#39; WHERE username=&amp;#39;$username&amp;#39;
tainted  :  [&amp;#39;$username&amp;#39;, &amp;#39;$useremail&amp;#39;]
function :  yasDB_insert
parameter:  INSERT INTO favourite (userid, gameid) VALUES($_SESSION, $_POST)
tainted  :  []
could not include BinaryOp(&amp;#39;.&amp;#39;, BinaryOp(&amp;#39;.&amp;#39;, &amp;#39;templates/&amp;#39;, ArrayOffset(Variable(&amp;#39;$setting&amp;#39;), &amp;#39;theme&amp;#39;)), &amp;#39;/play.php&amp;#39;) templates/modbox_24/play.php
could not include BinaryOp(&amp;#39;.&amp;#39;, BinaryOp(&amp;#39;.&amp;#39;, &amp;#39;templates/&amp;#39;, ArrayOffset(Variable(&amp;#39;$setting&amp;#39;), &amp;#39;theme&amp;#39;)), &amp;#39;/popularbig.php&amp;#39;) templates/modbox_24/popularbig.php
could not include BinaryOp(&amp;#39;.&amp;#39;, BinaryOp(&amp;#39;.&amp;#39;, &amp;#39;templates/&amp;#39;, ArrayOffset(Variable(&amp;#39;$setting&amp;#39;), &amp;#39;theme&amp;#39;)), &amp;#39;/topratedbig.php&amp;#39;) templates/modbox_24/topratedbig.php
could not include BinaryOp(&amp;#39;.&amp;#39;, BinaryOp(&amp;#39;.&amp;#39;, &amp;#39;templates/&amp;#39;, ArrayOffset(Variable(&amp;#39;$setting&amp;#39;), &amp;#39;theme&amp;#39;)), &amp;#39;/latestbig.php&amp;#39;) templates/modbox_24/latestbig.php
could not include BinaryOp(&amp;#39;.&amp;#39;, BinaryOp(&amp;#39;.&amp;#39;, &amp;#39;templates/&amp;#39;, ArrayOffset(Variable(&amp;#39;$setting&amp;#39;), &amp;#39;theme&amp;#39;)), &amp;#39;/privacy.php&amp;#39;) templates/modbox_24/privacy.php
could not include BinaryOp(&amp;#39;.&amp;#39;, BinaryOp(&amp;#39;.&amp;#39;, &amp;#39;templates/&amp;#39;, ArrayOffset(Variable(&amp;#39;$setting&amp;#39;), &amp;#39;theme&amp;#39;)), &amp;#39;/login2.php&amp;#39;) templates/modbox_24/login2.php
could not include BinaryOp(&amp;#39;.&amp;#39;, ArrayOffset(Variable(&amp;#39;$setting&amp;#39;), &amp;#39;siteurl&amp;#39;), &amp;#39;/includes/db_functions.inc.php&amp;#39;) /includes/db_functions.inc.php
could not include ../includes/db_functions.inc.php ../includes/db_functions.inc.php
forks:  614

real    0m21.031s
user    0m20.909s
sys     0m0.063s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First, an explanation of the output. When a tainted variable is used, three lines are printed out. First, the function, followed by the parameter where the tainted variable was found, and then the list of all currently tainted variables. The vulnerability we were looking for is evident here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;function :  yasDB_select
parameter:  SELECT count(id) AS count FROM `games` where category = $_GET
tainted  :  [&amp;#39;$page&amp;#39;]
function :  yasDB_select
parameter:  SELECT * FROM `games` where category = $_GET order by `id` desc LIMIT ObjectProperty(Variable(&amp;#39;$pageurl&amp;#39;), &amp;#39;start&amp;#39;), ObjectProperty(Variable(&amp;#39;$pageurl&amp;#39;), &amp;#39;limit&amp;#39;)
tainted  :  [&amp;#39;$page&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We actually turned up a few new vulnerabilities. For the sake of completion, the first two are in &lt;tt class="docutils literal"&gt;includes/forgotpass.php&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;db_functions.inc.php&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;config.inc.php&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;useremail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$useremail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;useremail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$res&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;yasDB_select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT * FROM user WHERE username=&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;$username&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; AND email=&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;$useremail&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;fetch_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MYSQLI_ASSOC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;srand&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;microtime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$random&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2343&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$random&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$upassword&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;yasDB_update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UPDATE user SET password=&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;$upassword&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; WHERE username=&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;$username&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The third is in &lt;tt class="docutils literal"&gt;templates/modbox_24/game.php&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;session_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    var yasurl = &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$setting&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;siteurl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;includes/ratingbar/rpc.php&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./includes/ratingbar/_drawrating.php&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// processes game votes and displays stars&lt;/span&gt;
&lt;span class="nv"&gt;$id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yasDB_clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nv"&gt;$gid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$displayed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;no&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Favourites_x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;yasDB_insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;INSERT INTO favourite (userid, gameid) VALUES(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$_SESSION&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;userid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gamesave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="k"&gt;die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Error updating favourites&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps"&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Objects are currently ignored. Method calls in the AST are evaluated as regular function calls, treating the method name as a simple function. This allows us to set method names as target USE functions and check for php code such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;$query = $db-&amp;gt;query(&amp;quot;SELECT * FROM example WHERE id=&amp;quot; . $GET[&amp;#39;id&amp;#39;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However we won't evaluate code inside object methods. This is important as we will evaluate code within regular functions.&lt;/p&gt;
&lt;p&gt;That's all for now. Cheers.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="taint analysis"></category></entry><entry><title>Dealing with Path Explosion in Static Taint Analysis</title><link href="http://tfpwn.rainbowsandpwnies.com/dealing-with-path-explosion-in-static-taint-analysis.html" rel="alternate"></link><updated>2012-08-22T17:26:00-05:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2012-08-22:dealing-with-path-explosion-in-static-taint-analysis.html</id><summary type="html">&lt;p&gt;I'm writing a taint analysis engine and I explore all possible traces. I have a method to offset exponential path explosion. This has probably been done before, but I'll write down what I'm doing anyway.&lt;/p&gt;
&lt;p&gt;First I'll pseudo-define a simple grammar&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Variables    := $[A-Z]
Functions    := [a-z](&amp;lt;parameter&amp;gt;)
Condition    := ?
If_Statement := if (Condition) Block
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In taint analysis, we have 3 functions, &lt;tt class="docutils literal"&gt;TAINT()&lt;/tt&gt; &lt;tt class="docutils literal"&gt;SANITIZE()&lt;/tt&gt; &lt;tt class="docutils literal"&gt;USE()&lt;/tt&gt;. The goal is to find a trace where a variable is called by &lt;tt class="docutils literal"&gt;TAINT()&lt;/tt&gt; and then &lt;tt class="docutils literal"&gt;USE()&lt;/tt&gt; before a call to &lt;tt class="docutils literal"&gt;SANITIZE()&lt;/tt&gt;. Take our example program:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;0: TAINT(A)
1: if (?) a()
2: if (?) SANITIZE(A)
3: if (?) b()
4: USE(A)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are 8 possible traces for this program, or &lt;tt class="docutils literal"&gt;2 ^ (1 + #conditions)&lt;/tt&gt;. They are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;TRACES = {
    (0,1,2,3,4), (0,1,2,4), (0,1,3,4), (0,2,3,4),
    (0,3,4),     (0,2,4),   (0,3,4),   (0,4)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, there are only two interesting traces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;INTERESTING_TRACES = {
    (0,2,4), (0,4)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because we have exponential path explosion, we need to find a way to reduce the number of non-interesting paths.&lt;/p&gt;
&lt;p&gt;After executing a conditional block we check to see if there was any change in the taint of variables. My taint analysis engine doesn't evaluate conditions or store values, it only stores taint. Therefor, if a conditional block is executed and no change to taint is made, we stop execution of that trace.&lt;/p&gt;
&lt;p&gt;This results in the following traces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ACTUAL_TRACES = {
    (0,1), (0,2,3), (0,2,4), (0,3), (0,4)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;#ACTUAL_TRACES &amp;lt; #TRACES&lt;/tt&gt;, however, &lt;tt class="docutils literal"&gt;INTERESTING_TRACES&lt;/tt&gt; remains a subset of &lt;tt class="docutils literal"&gt;ACTUAL_TRACES&lt;/tt&gt;. We reduce the number of traces we must analyze, yet still achieve our intended result. As paths explode exponentially, so do the savings from this method.&lt;/p&gt;
</summary><category term="taint analysis"></category></entry><entry><title>Modelling Symbolic Memory</title><link href="http://tfpwn.rainbowsandpwnies.com/modelling-symbolic-memory.html" rel="alternate"></link><updated>2012-08-11T18:59:00-05:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2012-08-11:modelling-symbolic-memory.html</id><summary type="html">&lt;p&gt;My Symbolic Execution Engine creates a special-purpose VM environment for the purpose of symbolically executing programs. The VM has two locations for storing data, variables and memory. It's easy to associate registers with variables, and the virtual memory space available in userland to memory. This is correct enough for this post.&lt;/p&gt;
&lt;p&gt;The engine runs off an Intermediate Language (also known as Intermediate Representation) which is nothing more than a simple assembly language. rnp_see has 23 IR instructions. However, in memory the instructions to be executed are stored in the target assembly language encoding (for our cases, x86-64). We therefor have a translator which reads in an instruction in the target assembly language and outputs IR instructions.&lt;/p&gt;
&lt;p&gt;A basic loop for the VM would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;loop :
    target_instructions = memory(variables[InstructionPointer])
    ir_instructions = translator(target_instructions)
    execute(ir_instructions)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where execute updates the variables and memory dependent on &lt;tt class="docutils literal"&gt;ir_instructions&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I use the notation &lt;tt class="docutils literal"&gt;(bit_size {SSA Identifier} value)&lt;/tt&gt; to denote symbolic values, where &lt;tt class="docutils literal"&gt;(8 {0} 0x41)&lt;/tt&gt; would be a single byte representing that character &lt;tt class="docutils literal"&gt;'A'&lt;/tt&gt; and:
&lt;tt class="docutils literal"&gt;(8 {0} (8 {1} wild) &amp;lt; (8 {2} 0x41))&lt;/tt&gt; represents all possible bytes less than &lt;tt class="docutils literal"&gt;'A'&lt;/tt&gt;. When not necessary, I'll omit the SSA Identifier, IE: &lt;tt class="docutils literal"&gt;(8 (8 wild) &amp;lt; (8 0x41))&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;There are two problems addressed in my memory model. The first problem is the growth of the engine as symbolic branches spur the creation of multiple symbolic VMs. A symbolic branch is one where the VM makes a decision based on a symbolic value which can follow multiple paths, such as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;if ( (8 {0} wild) &amp;lt; (8 {1} 0x41) ) {
    update_state(conditions_A);
} else {
    update_state(conditions_B);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here the VM must be cloned, where in one branch &lt;tt class="docutils literal"&gt;{0}&lt;/tt&gt; takes the values less than &lt;tt class="docutils literal"&gt;0x41&lt;/tt&gt;, and in the other branch &lt;tt class="docutils literal"&gt;{0}&lt;/tt&gt; takes the values greater than &lt;tt class="docutils literal"&gt;0x41&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To deal with this, the memory model uses a copy-on-write policy. The new memory model will retain references to the original memory, broken into blocks referred to as pages. When a page is written to in either branch, it is copied first, and the respective memory model references the new page so as not to interfere with the other branch.&lt;/p&gt;
&lt;p&gt;Symbolic memory values, or memory locations whose values evaluate to expressions instead of concrete values, exist on a layer on top of the concrete values. We query first to see if a symbolic value is available. If a symbolic value is not available for the memory location, we return a concrete value and can bypass querying the SMT solver for further operations on this value, assuming other operands in future operations are also concrete.&lt;/p&gt;
&lt;p&gt;The other problem is one of personal preference. Assume we read a single byte of symbolic input, and this value is placed in a variable which is zero-extended to 64-bits. When we write this value back to memory, we will write 7 bytes of concrete values, but they are marked as symbolic.&lt;/p&gt;
&lt;p&gt;To compensate for this, each SymbolicValue (as the class is called) has a method called concretize(). Concretize will attempt to determine whether the value has only a single possible value.&lt;/p&gt;
&lt;p&gt;Assuming we have a symbolic value &lt;tt class="docutils literal"&gt;(8 {0} &lt;span class="pre"&gt;(some-expression))&lt;/span&gt;&lt;/tt&gt;, we first query the SMT solver for a solution to &lt;tt class="docutils literal"&gt;{0} == {0}&lt;/tt&gt;. If the solution to this problem is &lt;tt class="docutils literal"&gt;{1}&lt;/tt&gt;, we then query for &lt;tt class="docutils literal"&gt;{0} != {1}&lt;/tt&gt;. If this second condition is unsatisfiable, the only possible value for &lt;tt class="docutils literal"&gt;{0} is {1}&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;An example is given below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;concretize: (32 (32 (8 {57468} wild) &amp;amp; (8 {57469} 0xff)) &amp;gt;&amp;gt; (8 {59062} 0x08))
done concretizing
concretized value at address 7fff0ae3748d
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These three lines come from the use case above, where an 8-bit wild symbolic value has been zero-extended to 32-bits, and we are storing the 32-bit value back into the memory model. The second byte of this result is, however, not symbolic, and has the only possible value of 0. My engine will detect this and store a concrete value of 0 instead of a symbolic value.&lt;/p&gt;
&lt;p&gt;Why is this important? From a correctness standpoint it is not. The analysis of the program will be correct without this concretizing step. However, often not covered in academic papers is the frustrating purpose of engineering your engine. The fewer symbolic values being thrown around memory, the much cleaner the interpretation will be and the fewer headaches suffered.&lt;/p&gt;
</summary><category term="symbolic execution"></category></entry><entry><title>Simple Symbolic Execution Engine Validation in Concrete Environments</title><link href="http://tfpwn.rainbowsandpwnies.com/simple-symbolic-execution-engine-validation-in-concrete-environments.html" rel="alternate"></link><updated>2012-07-10T15:00:00-05:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2012-07-10:simple-symbolic-execution-engine-validation-in-concrete-environments.html</id><summary type="html">&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;To simplify analysis and implementation, host symbolic execution engines operate on a simple, RISC-like Intermediate Representation. Target assembly language is translated into this IR, forcing the translation to capture the full semantics of the host assembly language. To provide simple testing of this translation process, rnp_see forks a test executable, breaks at the entry address, and loads the executable into the symbolic execution engine. It then steps through the binary running in the target environment as well as in the symbolic execution engine. By comparing the General Purpose Registers at each step, rnp_see can quickly identify bugs and ensure a certain level of accuracy in the translation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="preparing-for-validation"&gt;
&lt;h2&gt;Preparing for validation&lt;/h2&gt;
&lt;p&gt;Rnp_see consists of multiple parts, one of which is a loader. The original loader for rnp_see, given a 64-bit ELF binary for linux, created, from scratch, a 64-bit linux userland environment for the VM. I recently wrote an additional loader, currently named Lx86, which loads the executable, breaks at the entry point, and then context switches from native execution to execution within rnp_see. This is done by instantiating Lx86 and passing it to the VM at instantiation time. Lx86 has the same functionality outlined in my previous post for the Elf loader, which both now inherit from an abstract virtual class simply named Loader.&lt;/p&gt;
&lt;p&gt;By adding two additional methods to Lx86, Lx86 gains the functionality to single step through the loaded executable and dump the general purpose registers. This functionality is used to compare the program running in the native environment against the program running in the rnp_see environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stepping-through-the-program"&gt;
&lt;h2&gt;Stepping through the program&lt;/h2&gt;
&lt;p&gt;After loading, the program is stepped through in both rnp_see and the native environment, printing both native instructions and IR instructions. At each step, the GPRs are fetched and compared. If the GPRs diverge at any step, execution is halted and all GPRs are displayed with diverging GPRs highlighted. If GPRs diverge, the problem can be quickly identified from the given output, fixed, and validation rerun to discover more bugs.&lt;/p&gt;
&lt;p&gt;During testing, I used csmith, a tool designed to create random C code to test for compiler bugs. Symbolic execution is inherently slower than native execution, and csmith programs take many instructions to run. To speed up testing, once diverging registers were identified the validator would always be restarted on the instruction immediately proceeding the bug. This allowed for rnp_see execution to begin at the problem area, bypassing the slow process of translating and executing the previous instructions, and quickly identifing whether the bug was solved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="system-calls"&gt;
&lt;h2&gt;System Calls&lt;/h2&gt;
&lt;p&gt;In the x86-64 calling convention used by linux, not all registers must be preserved across function calls. This includes system calls. Recalling that rnp_see emulates kernel functionality, several registers would diverge across system calls, even if the system call was producing good results. To fix this problem during validation, rnp_see system calls were forced to return the same values in trashed registers as were returned in native execution. Fortunately, the values returned were deterministic and this fix worked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ptrace-singlestep-problems"&gt;
&lt;h2&gt;PTRACE_SINGLESTEP Problems&lt;/h2&gt;
&lt;p&gt;For unknown reasons, PTRACE_SINGLESTEP in Ubuntu 12.04 running inside VirtualBox would occassionally step two instructions instead of one. This would cause the validator to throw errors for diverging instructions. To solve this problem, the values of the instruction pointers are compared at each step before the rest of the registers. If the instruction pointers diverge, rnp_see is given one more step to catch up with native execution. In some very weird cases, such as an instruction sequence:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;jcc&lt;/span&gt; &lt;span class="mh"&gt;0x1&lt;/span&gt;
&lt;span class="nf"&gt;nop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This may incorrectly show identical behavior between rnp_see and native execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="methodology-problems"&gt;
&lt;h2&gt;Methodology Problems&lt;/h2&gt;
&lt;p&gt;This method of validating rnp_see is not comprehensive. It tests only the instruction instances encountered in the test cases, and only their effects on GPRs. Other methods, such as &lt;a class="reference external" href="http://research.microsoft.com/en-us/um/people/pg/public_psfiles/pldi2012.pdf"&gt;Microsft RiSE's Automated Synthesis of Symbolic Instruction Encodings from I/O Samples&lt;/a&gt; ensure greater accuracy in the translation. For example, this method may not catch errors in ScaleIndexBase calculations for memory operands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;Despite the lack of comprehensiveness, this method proved quick to implement and accurate enough to allow rnp_see to begin passing its test cases in concrete execution. I recommend this as a first step to insure some level of accuracy to those who are writing their own symbolic execution engines from scratch.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="symbolic execution"></category></entry><entry><title>Making a Symbolic Execution Engine</title><link href="http://tfpwn.rainbowsandpwnies.com/making-a-symbolic-execution-engine.html" rel="alternate"></link><updated>2012-06-28T15:00:00-05:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2012-06-28:making-a-symbolic-execution-engine.html</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this post I present my work over the past couple weeks on a symbolic execution engine called &lt;a class="reference external" href="http://github.com/endeav0r/rnp_see"&gt;rnp_see&lt;/a&gt;. I am releasing it under the GPLv3 license here: rnp_see. Rnp_see is short for, &amp;quot;Rainbows aNd Pwnies Symbolic Execution Engine,&amp;quot; and is pronounced, &amp;quot;rip see.&amp;quot;&lt;/p&gt;
&lt;p&gt;Note that this is experimental code and does not create a complete environment. I am still fixing bugs and it is only implemented to the degree necessary to work through the test cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="building-and-running"&gt;
&lt;h2&gt;Building and Running&lt;/h2&gt;
&lt;p&gt;Requirements: A current c++ compiler which supports c++11 extensions, as well as the udis86 disassembly library. Rnp_see currently uses the gcc extension &lt;tt class="docutils literal"&gt;__uint128_t&lt;/tt&gt; which requires a 64-bit environment. I am using &lt;tt class="docutils literal"&gt;Ubuntu 12.04 &lt;span class="pre"&gt;x86-64&lt;/span&gt;&lt;/tt&gt; to build, but I am told the project also successfully builds in an updated &lt;tt class="docutils literal"&gt;Fedora 17 &lt;span class="pre"&gt;x86-64&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;After grabbing the necessary requirements, clone the repository and run make. A few small test cases are available, of which 1 &amp;amp; 2 are the ones I am currently testing against. Change directory into either test/1 or test/2 and run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;../../see test
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The currently implemented commands are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;a&lt;/tt&gt; - (All) run until completion&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;s&lt;/tt&gt; - step a single instruction&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;d&lt;/tt&gt; - step 8 instructions&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;f&lt;/tt&gt; - step 16 instructions&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;g&lt;/tt&gt; - step 128 instructions&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;r&lt;/tt&gt; - print variables corresponding to x86 registers with their ascii names&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;v&lt;/tt&gt; - print all variables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of the time when I run this engine, my command line looks something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;echo gggfffssssr | ../../see test
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These applications write to stdout. The engine will create a file based on the filehandle, fh_1, and append all data written to stdout there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-engine-design"&gt;
&lt;h2&gt;Basic Engine Design&lt;/h2&gt;
&lt;p&gt;The engine can be broken into the following pieces:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Loader&lt;/strong&gt;: Responsible for creating the initial environment for the VM.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Translator&lt;/strong&gt;: Translates instructions from the host assembly language to the Intermediate Language used by the VM.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: Holds, &amp;quot;Pages,&amp;quot; and contains the memory state of the VM.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IL Instructions&lt;/strong&gt;: RISC type instructions without side-effects, used by the VM to update the state of variables and memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VM&lt;/strong&gt;: The main execution environment, or the glue that brings everything else together. Executes instructions in its Intermediate Language to modify the state of memory and variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wanted the engine to be completely self-contained which, for a few small caveats, it is. By self contained I mean the entire process of loading and executing the target binary is done entirely by the engine without help from the engine's environment. This means the engine must handle system calls internally. This engine is currently targeting non-threaded applications which run in userland, and in its current implementation specifically a linux x86-64 userland environment.&lt;/p&gt;
&lt;p&gt;I wanted the engine to be readily understood and hackable by others. For this reason, I chose c++ as my language of implementation. Someone, somewhere, is grimacing that I am not using ocaml.&lt;/p&gt;
&lt;p&gt;Lastly, the engine must display some sort of zero-configuration default behavior. Currently, one simply passes the name of the target binary to initialize the engine and uses the commands outlined above to begin executing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="loader"&gt;
&lt;h2&gt;Loader&lt;/h2&gt;
&lt;p&gt;The current loader supports 64-bit Elf binaries. It interfaces with the VM through a few calls: &lt;tt class="docutils literal"&gt;g_memory()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;g_variables()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;g_ip_id()&lt;/tt&gt;. These calls set the initial state of the VM.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;g_memory()&lt;/tt&gt; will create an artificial memory environment for the target binary, any ELFs for which &lt;tt class="docutils literal"&gt;DT_NEEDED&lt;/tt&gt; entries are available in the Elf dynamic table (read shared objects (read DLLs)), the stack and Thread Local Storage. This work is typically done by the kernel and/or GNU binutils before the binary is entered and is required to create a workable environment for the simple test cases built with current compilers for a current 64-bit linux environment. The loader will perform the necessary relocations found in the provided test cases. Once the memory has been set up and initialized, this memory model is returned to the VM.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;g_variables()&lt;/tt&gt; will return a map of variables representing the initial state of registers when the program is loaded. For example, &lt;tt class="docutils literal"&gt;%rsp&lt;/tt&gt; must point to memory inside the stack, and &lt;tt class="docutils literal"&gt;%fs&lt;/tt&gt; must point to the Thread Local Storage Data Structure. &lt;tt class="docutils literal"&gt;%rip&lt;/tt&gt; points to the entry point of the binary.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;g_ip_id()&lt;/tt&gt; returns the identifier corresponding to the instruction pointer. In our case, &lt;tt class="docutils literal"&gt;g_ip_id()&lt;/tt&gt; returns the identifier of &lt;tt class="docutils literal"&gt;%rip&lt;/tt&gt;. The VM only understands its Intermediate Language, memory and variables, and has no knowledge of the host assembly language. For this reason, the &lt;tt class="docutils literal"&gt;g_ip_id()&lt;/tt&gt; call is necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="il-instructions"&gt;
&lt;h2&gt;IL Instructions&lt;/h2&gt;
&lt;p&gt;The rnp_see IL instruction set was heavily influenced by the paper: &lt;a class="reference external" href="http://www2.in.tum.de/bib/files/sepp11precise.pdf"&gt;Precise Static Analysis of Binaries by Extracting Relational Information&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The 23 instructions implemented by the rnp_see intermediate language are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;General Instructions&lt;/strong&gt;: &lt;tt class="docutils literal"&gt;syscall&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;load&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;store&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;brc&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;assign&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;not&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;signextend&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;hlt&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Binary Operation Instructions&lt;/strong&gt;: &lt;tt class="docutils literal"&gt;add&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;sub&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;mul&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;div&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;mod&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;shl&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;shr&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;and&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;or&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;xor&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comparison Operation Instructions&lt;/strong&gt;: &lt;tt class="docutils literal"&gt;cmpeq&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;cmplts&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;cmpltu&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;cmples&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;cmpleu&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is currently no difference between the comparison and binary operation instructions.&lt;/p&gt;
&lt;p&gt;Non-conditional branches are translated to conditional branches where the condition is a constant value of 1. Unlike assembly families such as x86, the rnp_see IL instructions have no side-effects. When host assembly is translated to IL, these side-effects are broken out to additional IL instructions and executed explicitly, as is often done in the multitude of literature available (including the above referenced paper).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="translator"&gt;
&lt;h2&gt;Translator&lt;/h2&gt;
&lt;p&gt;The translator, &amp;quot;translates,&amp;quot; instructions from the host assembly language to the Intermediate Language used by rnp_see. Typically this involves creating several IL instructions per host assembly instruction. The currently implemented translator translates 74 x86-64 instructions to IL instructions.&lt;/p&gt;
&lt;p&gt;The translator was written using the udis86 library and is intended to be easy to understand. Helper functions, such as &lt;tt class="docutils literal"&gt;operand_get()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;operand_set()&lt;/tt&gt; are provided to ease the creation of new instructions. For example, given a memory operand, &lt;tt class="docutils literal"&gt;operand_get()&lt;/tt&gt; will create the necessary instructions to load value from memory and return an InstructionOperand type which will hold the value after the load completes. &lt;tt class="docutils literal"&gt;operand_set()&lt;/tt&gt; does the same for writing to memory operands.&lt;/p&gt;
&lt;p&gt;x86-64 assembly allows the loading and storing of 128-bit values. However, rnp_see only supports 64-bit loads and stores (explanation in following paragraph). &lt;tt class="docutils literal"&gt;operand_get()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;operand_set()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;operand_load()&lt;/tt&gt; will break 128-bit loads and stores into multiple 64-bit loads and stores appropriately.&lt;/p&gt;
&lt;p&gt;Rnp_see is designed to work only on the types found in &lt;tt class="docutils literal"&gt;&amp;lt;inttypes.h&amp;gt;&lt;/tt&gt;, or, more specifically, nothing larger than &lt;tt class="docutils literal"&gt;uint64_t&lt;/tt&gt;. However, it must support 128-bit operations as x86-64 assembly has 128-bit registers. This is done by creating a special class for all SymbolicValue values, UInt, and restricting all 128-bit operations to this class. This class currently uses &lt;tt class="docutils literal"&gt;__uint128_t&lt;/tt&gt; as its type for storing values, which restricts rnp_see to building and running on systems which support the gcc &lt;tt class="docutils literal"&gt;__uint128_t&lt;/tt&gt; extension. However, the class can be replaced later with one which does not depend on &lt;tt class="docutils literal"&gt;__uint128_t&lt;/tt&gt;, allowing rnp_see to build and run on a wider variety of systems.&lt;/p&gt;
&lt;p&gt;The VM uses two functions from the translator, &lt;tt class="docutils literal"&gt;translate()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;native_asm()&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;translate()&lt;/tt&gt; returns a list of IL instructions for the VM to execute, while &lt;tt class="docutils literal"&gt;native_asm()&lt;/tt&gt; returns a string representation of the instruction in the host assembly language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="memory"&gt;
&lt;h2&gt;Memory&lt;/h2&gt;
&lt;p&gt;Modelling memory appears to be a continuing problem for the design of Symbolic Execution Engines. Rnp_see attempts to use the least memory possible to accomplish its task. Rnp_see's memory model, hereforth referred to as simply Memory, consists of multiple buffers of type Page. Memory maps these pages by their addresses. When a load or store occurs, Memory will locate the correct page and perform the operation at the offset from the page's beginning. Stores and loads across consecutive pages is a problem, and the memory model currently only supports loading 64-bit values across pages.&lt;/p&gt;
&lt;p&gt;The advantage of using pages to model memory comes will be shown when forking the engine during symbolic execution. When a new memory model is created for a forked engine, the child model reference's the parent's pages. From this point onward, both child and parent will perform a copy-on-write for any pages modified after the fork. This allows multiple forked engines to reference the same memory if that memory remains unchanged, and minimizes both the amount of work done and space required to create a new memory model for the child engine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vm"&gt;
&lt;h2&gt;VM&lt;/h2&gt;
&lt;p&gt;The VM receives an initial state from the loader, fetches the bytes pointed to by the Instruction Pointer, passes these bytes to the translator to receive IL instructions, and executes the IL instructions to update its variables and Memory. It maintains both a memory model and a map of identifiers to symbolic values. The SymbolicValue type can hold either concrete values, or expressions which represent a range of possible values. The VM will continue executing until it reaches a hlt instruction, which, as of this writing, is currently the only unimplemented instruction in the VM.&lt;/p&gt;
&lt;p&gt;When the VM reaches a syscall instruction, it passes references to its variables and memory to a kernel. Currently, rnp_see includes a kernel which implements a small subset of x86-64 linux system calls. This kernel will take control of the variables and memory and update them accordingly. As most program input comes from system calls to the kernel, this is a natural place to inject symbolic input into the program. However, as of this writing, the kernel executes concretely as I work through the test cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-and-acknowledgments"&gt;
&lt;h2&gt;Conclusion and Acknowledgments&lt;/h2&gt;
&lt;p&gt;I emphasize the code in its current state is experimental quality. It is under continuous development and is suitable for nothing other than reference and experimentation.&lt;/p&gt;
&lt;p&gt;Thanks go to gimpyds for providing the motivation to start writing this thing and answering questions throughout. Additional thanks go to, in alphabetical order, oldgregg, twabulldog, v1013nt and vnutz (who provided crazy context on the &lt;tt class="docutils literal"&gt;movsd&lt;/tt&gt; instruction).&lt;/p&gt;
&lt;/div&gt;
</summary><category term="symbolic execution"></category></entry><entry><title>A Basic Introduction to Communicating Securely with PGP</title><link href="http://tfpwn.rainbowsandpwnies.com/a-basic-introduction-to-communicating-securely-with-pgp.html" rel="alternate"></link><updated>2011-03-29T15:00:00-05:00</updated><author><name>endeavor</name></author><id>tag:tfpwn.rainbowsandpwnies.com,2011-03-29:a-basic-introduction-to-communicating-securely-with-pgp.html</id><summary type="html">&lt;p&gt;This post is a basic explanation of the concepts behind sending/receiving messages with PGP. This is the basic information I want someone to understand before I start communicating with them. These explanations are fairly simplified.&lt;/p&gt;
&lt;p&gt;Infeasible means it is very, very difficult to do something. In cryptology, this usually equates to something along the lines of, &amp;quot;It's possible with known algorithms and the expected advancements in hardware, but it will take thousands/millions of years.&amp;quot;&lt;/p&gt;
&lt;div class="section" id="what-is-pgp"&gt;
&lt;h2&gt;What is PGP&lt;/h2&gt;
&lt;p&gt;PGP stands for Pretty Good Privacy, and is a program originally developed in the 90s to send and received encrypted emails. It is &lt;em&gt;not&lt;/em&gt; an encryption algorithm. It provides a basic format for using various algorithms and best-practices in cryptology to send messages between people. PGP has now become the colloquial word used for a variety of concepts used with this format. A PGP Key is a key that can be used with PGP to encrypt/decrypt emails. A PGP encrypted email is an email that could be decrypted with PGP, given a PGP key. Again, &lt;em&gt;PGP is not a cryptographic algorithm&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I personally use &lt;a class="reference external" href="http://www.gnupg.org/"&gt;GnuPG&lt;/a&gt; along with &lt;a class="reference external" href="http://enigmail.mozdev.org/"&gt;enigmail&lt;/a&gt; to communicate using PGP formatted messages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-three-casic-types-of-encryption"&gt;
&lt;h2&gt;The Three Casic Types of Encryption&lt;/h2&gt;
&lt;p&gt;PGP uses all three of these. We will hit them briefly now, and then again at the end.&lt;/p&gt;
&lt;div class="section" id="symmetric-encryption"&gt;
&lt;h3&gt;Symmetric Encryption&lt;/h3&gt;
&lt;p&gt;Symmetric encryption is used to exchange information between two parties with one key. This key is shared, a &amp;quot;shared secret&amp;quot;, and the security of symmetric encryption relies on the safe-guarding of this shared secret (the key). Relative to asymmetric encryption, symmetric encryption is fast. AES stands for the Advanced Encryption Standard, comes in 128 and 256 bit flavors (128 is considered secure/unbreakable, but 256 is available to comply with requirements but forth by NIST when they were evaluating candidates for AES), and replaces 3DES, which was three consecutive rounds of DES and was the previous encryption standard.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Key: Both parties have same, shared key&lt;/li&gt;
&lt;li&gt;Example Algorithms: AES, Blowfish, Twofish, 3DES&lt;/li&gt;
&lt;li&gt;Speed: Fast&lt;/li&gt;
&lt;li&gt;Security Relies On: Safe-guarding shared key&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="asymmetric-encryption"&gt;
&lt;h3&gt;Asymmetric Encryption&lt;/h3&gt;
&lt;p&gt;Asymmetric encryption is used to exchange information between two parties where one party has a known &amp;quot;public&amp;quot; key, and uses this known &amp;quot;public&amp;quot; key to encrypt information for another party. This information can only be decrypted with the &amp;quot;private&amp;quot; key which is kept secret. Asymmetric encryption is based on mathematical problems that are infeasible to solve. Relative to symmetric encryption, asymmetric encryption is slow. RSA and the Diffie-Hellman Key Exchange are two basic methods (based on two different infeasible-to-solve problems) for implementing asymmetric encryption.&lt;/p&gt;
&lt;p&gt;There are TWO KEYS in asymmetric encryption, the &amp;quot;private&amp;quot; key and the &amp;quot;public&amp;quot; key. Ok, technically there are four keys, one pair for signing and one pair for encrypting, but we will pretend there are two keys and abstract some details for quick understanding. If I want to send you a message, I use your public key to encrypt your message. Only you, with your private key, can decrypt that message. If you send me a message, you can use your private key to sign that message. I can then use your public key to verify the signature, and mathematically prove that the message comes from you.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Key: You have a secret, private key, and you share a public key with EVERYONE&lt;/li&gt;
&lt;li&gt;Example Algorithms: RSA, Diffie-Hellman Key Exchange&lt;/li&gt;
&lt;li&gt;Speed: Slow&lt;/li&gt;
&lt;li&gt;Security Relies On: Safe-guarding private key and verifying public key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will return to security relies on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cryptographic-hash"&gt;
&lt;h3&gt;Cryptographic Hash&lt;/h3&gt;
&lt;p&gt;A cryptographic hash is a &amp;quot;one-way&amp;quot; cryptographic operation where we input data of arbitrary length and end up with a unique number. Hash is used colloquially to refer to both the algorithm, and the resulting &amp;quot;sum&amp;quot; of the hashing algorithm. We will use &amp;quot;sum&amp;quot; to mean the result of the hashing operation. A cryptographic has two very special properties by definition.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Preimage Resistance:Given the sum of a hash, it is infeasible to create or find any input that will hash to that same sum.&lt;/li&gt;
&lt;li&gt;Collision Resistance: It is infeasible to find any two inputs that will hash to the same sum.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Preimage resistance means you do not get to pick the sum. Collision resistance means you can pick the sum. Collision attacks are easier to implement than preimage attacks. Some implementations of cryptographic hashing algorithms are still valid if the hash can withstand preimage attacks but falls prone to collision attacks. Anything that deals with PGP (key fingerprints, signing emails) requires both strong preimage and collision resistance.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Key: There is no key&lt;/li&gt;
&lt;li&gt;Example Algorithms: OLD_DO_NOT_USE(MD4, MD5, SHA1) USE(SHA256/SHA512 (these are both sha2 with different block sizes))&lt;/li&gt;
&lt;li&gt;Speed: fast&lt;/li&gt;
&lt;li&gt;Security Relies On: The strength of the hashing algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="understanding-asymmetric-encryption-security-concerns"&gt;
&lt;h2&gt;Understanding Asymmetric Encryption Security Concerns&lt;/h2&gt;
&lt;p&gt;Fingerprint: A cryptographic hash (sum) of a public key. Usually when I say, &amp;quot;verify public key,&amp;quot; I mean the fingerprint. PGP/GnuPG will generate these fingerprints for you.&lt;/p&gt;
&lt;p&gt;Symmetric security is pretty easy to understand. Cryptographic encryption is also pretty easy to understand. Asymmetric encryption, however, has a few special implications we will need to cover. These come from the second security requirement of asymmetric encryption: verifying the public key.&lt;/p&gt;
&lt;p&gt;Imagine a scenario where I post my public key to a website and then tell you to go download my public key (exactly like my key available on rainbowsandpwnies.com). Unbeknownst to either you or me, someone has:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hacked into rainbowsandpwnies.com and modified the key stored there.&lt;/li&gt;
&lt;li&gt;Is sitting between you and rainbowsandpwnies.com and giving you fake information.&lt;/li&gt;
&lt;li&gt;Modifying the key you will end up receiving by some other means.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This third party instead gives you their public key. You send a message to me, encrypting it with the public key of the third party. They then decrypt this message, read it, re-encrypt it with my real public key, and then send the message to me. The third party can even sign the message with their private key and send me their public key. You and I will now communicate, believing we are speaking secretly, but our messages are being read by third parties.&lt;/p&gt;
&lt;p&gt;In order to know we are speaking secretly, we must be sure that our messages are coming directly from one another. To do this, two things need to happen:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You must know, with certainty, that you have my real public key. I must know, with certainty, that I have your public key.&lt;/li&gt;
&lt;li&gt;If I receive a message from you, it must be signed with your public key (that I know belongs to you). Vice-versa for messages you receive from me.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are multiple models for establishing trust. One popular model involves what is called a Certificate Authority. In this model, everyone has the public key of a trusted entity known as the Certificate Authority. You send your public key to the Certificate Authority in what is known as Certificate Signing Request. The Certificate Authority then verifies your identity (by some other means) and then signs your certificate. When you send me your public key, you also send you certificate signed by the Certificate Authority. I can use the Certificate Authority's public key (that I already have and trust) to verify his signature on your certificate, and because your public key is in that certificate, I transfer my trust of the Certificate Authority, through the certificate, to that public key. I now know that public key belongs to you, and can trust that public key with equal trust as I trust the Certificate Authority. This model is referred to as Public Key Infrastructure (PKI). You can have your PGP key signed by a CA, if you want, for a fee.&lt;/p&gt;
&lt;p&gt;There is another model for trust, known as the Web of Trust. The easiest way to imagine the Web of Trust is to think of each user as a &lt;em&gt;Certificate Authority&lt;/em&gt;. In the Web of Trust, users &amp;quot;sign&amp;quot; the public keys of other users whom they verify. We can now base our trust of a public key equally to the amount of trust we place in the users who signed that public key. We place trust in the signers based on our confidence in them to both safeguard their private keys, and properly verify the public keys they sign. That's a two part trust there, and it's important to understand both of them.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If I trust Mark to both safeguard his private key and to only sign public keys he properly verifies, and Mark has signed your key, then I can transfer that trust to your key.&lt;/li&gt;
&lt;li&gt;If I trust Mark to safeguard his private key but I don't believe Mark uses proper methods to verify other public keys, I will not trust his signature of your key.&lt;/li&gt;
&lt;li&gt;If I trust Mark to use proper methods to verify other public keys but do not think Mark properly safeguards his key, I will not trust his signature of your key.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &amp;quot;Web&amp;quot; part of the Web of Trust comes from the &amp;quot;filtering&amp;quot; down of this trust. Imagine I trust Mark fully, and Mark trusts Steve fully. If Steve signs Katie's key, then I will trust Katie's key. There is more to the Web of Trust, but if you just understand the concepts discussed above then you (and I) will be OK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="verifying-signing-public-keys"&gt;
&lt;h2&gt;Verifying/Signing Public Keys&lt;/h2&gt;
&lt;p&gt;There are two very important parts to verifying a public key before you sign/trust it.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You must be certain the other person is who they say they are.&lt;/li&gt;
&lt;li&gt;You must be certain the method in which they are giving you their public key is one that can not be intercepted and modified.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The easiest way to do this is to meet the person face-to-face, exchange multiple forms of identification (a passport and driver's license, for example), and then exchange fingerprints of public keys. &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Key_signing_party"&gt;You can make it into a party&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you already know the person well enough to be certain of their identity, then any method which can not be intercepted and modified will suffice. IE: you could meet them face-to-face (this is always preferred). Another method I sometimes use is a webcam chat with someone I know where I simultaneously write out, in view of the camera, and vocally speak each letter of the fingerprint.
Safeguarding your Key&lt;/p&gt;
&lt;p&gt;In addition to verifying the keys of others, you must also safeguard your own private key. &lt;strong&gt;Losing your private key can have severe consequences relative to the amount of trust other people have placed in your ability to safeguard it.&lt;/strong&gt; In this context, &amp;quot;losing,&amp;quot; your private key means someone else has a copy of your private key. You may (and most likely will) still have your private key. You must maintain control of your private key at all times. Do not use your private key on insecure machines. Other people are counting on you to maintain your key.&lt;/p&gt;
&lt;p&gt;Here is a list of acceptable places to use/store your private key to decrypt and sign emails:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;On a computer that you, and you alone, control, that other people do not and will not tamper with, and that you keep patched and secure.&lt;/li&gt;
&lt;li&gt;On an encrypted piece of removable storage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a list of unacceptable places to use/store your private key to decrypt and sign emails, &lt;em&gt;regardless of how badly you need/want to sign and/or decrypt an email&lt;/em&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A computer that is owned by your university/employer/government/friend/parents.&lt;/li&gt;
&lt;li&gt;That computer, that you own, in your living room, that your Aunt Susie uses to read emails and play bejeweled on when she visits every other Tuesday.&lt;/li&gt;
&lt;li&gt;Your smartphone (especially iPhone/Android). (CEO, Here is a bunch of details of our company's intellectual property that we would be ruined if our competitors discovered. Don't worry, this email is encrypted. Sincerely, Employee -- sent from iPhone).&lt;/li&gt;
&lt;li&gt;On an unencrypted thumbdrive (or any other unencrypted removable media). Ever.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="a-quick-understanding-of-how-pgp-encrypts-signs-your-messages"&gt;
&lt;h2&gt;A quick understanding of how PGP encrypts/signs your messages&lt;/h2&gt;
&lt;p&gt;First, there are a lot of considerations when implementing a cryptographically secure solution like PGP. The quality of random numbers, side-channel attacks, padding and many other considerations are all taken into account. Don't try a homebrew solution.&lt;/p&gt;
&lt;p&gt;To encrypt a message, PGP will first encrypt the message with a symmetric encryption algorithm such as AES and a random key. This is because symmetric encryption is fast. PGP will then encrypt the random key with your public key. It will send the symmetrically encrypted text, along with the asymmetrically encrypted key, to you. You decrypt the key, and then decrypt the text.&lt;/p&gt;
&lt;p&gt;To sign a message, PGP will cryptographically hash your entire message. This is because cryptographic hashes are fast. Now, remember when we said you really had four keys instead of two? Well, you have a separate pair of signing keys. With your signing keys, your &amp;quot;encryption&amp;quot; or signing key is kept secret, and your &amp;quot;decryption&amp;quot; or verifying key is public. You use your private signing key to encrypt the cryptographic hash of the message. You send the encryption of the cryptographic hash with the message. Whomever receives your message can hash it, and then use your public verifying key to decrypt your signature. If the decrypted hash from the signature matches the hash the recipient generated of your message, then message is valid. In this case, valid means the recipient knows the message came from you and was not modified in any way.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="crypto"></category></entry></feed>